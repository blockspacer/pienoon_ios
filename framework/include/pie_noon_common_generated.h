// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PIENOONCOMMON_FPL_PIE_NOON_H_
#define FLATBUFFERS_GENERATED_PIENOONCOMMON_FPL_PIE_NOON_H_

#include "flatbuffers/flatbuffers.h"


namespace fpl {
namespace pie_noon {

struct Vec2i;
struct Vec2;
struct Vec3;
struct Vec4;
struct Vec4ub;

enum RenderableId {
  RenderableId_Invalid = 0,
  RenderableId_CharacterIdle = 1,
  RenderableId_CharacterLoad1 = 2,
  RenderableId_CharacterLoad2 = 3,
  RenderableId_CharacterLoad3 = 4,
  RenderableId_CharacterThrow = 5,
  RenderableId_CharacterBlock = 6,
  RenderableId_CharacterHitByPieFrame0 = 7,
  RenderableId_CharacterHitByPieFrame1 = 8,
  RenderableId_CharacterHitByPieFrame2 = 9,
  RenderableId_CharacterHitByPieFrame3 = 10,
  RenderableId_CharacterKnockedOut = 11,
  RenderableId_CharacterWin = 12,
  RenderableId_PieEmpty = 13,
  RenderableId_PieSmall = 14,
  RenderableId_PieMedium = 15,
  RenderableId_PieLarge = 16,
  RenderableId_PieBlock = 17,
  RenderableId_EnvironmentSky = 18,
  RenderableId_EnvironmentCloud = 19,
  RenderableId_EnvironmentCloudShadow = 20,
  RenderableId_EnvironmentSun = 21,
  RenderableId_EnvironmentSunGlow = 22,
  RenderableId_EnvironmentTree = 23,
  RenderableId_EnvironmentBush = 24,
  RenderableId_EnvironmentString = 25,
  RenderableId_EnvironmentStageFront = 26,
  RenderableId_EnvironmentStageGround = 27,
  RenderableId_EnvironmentStageEdge = 28,
  RenderableId_EnvironmentStoreFront = 29,
  RenderableId_EnvironmentStoreRoom = 30,
  RenderableId_EnvironmentAmbientOcclusionShadow = 31,
  RenderableId_Splatter1 = 32,
  RenderableId_Splatter2 = 33,
  RenderableId_Splatter3 = 34,
  RenderableId_Health = 35,
  RenderableId_UiArrow = 36,
  RenderableId_Pixel1x1 = 37,
  RenderableId_TargetReticle = 38,
  RenderableId_Count = 39
};

inline const char **EnumNamesRenderableId() {
  static const char *names[] = { "Invalid", "CharacterIdle", "CharacterLoad1", "CharacterLoad2", "CharacterLoad3", "CharacterThrow", "CharacterBlock", "CharacterHitByPieFrame0", "CharacterHitByPieFrame1", "CharacterHitByPieFrame2", "CharacterHitByPieFrame3", "CharacterKnockedOut", "CharacterWin", "PieEmpty", "PieSmall", "PieMedium", "PieLarge", "PieBlock", "EnvironmentSky", "EnvironmentCloud", "EnvironmentCloudShadow", "EnvironmentSun", "EnvironmentSunGlow", "EnvironmentTree", "EnvironmentBush", "EnvironmentString", "EnvironmentStageFront", "EnvironmentStageGround", "EnvironmentStageEdge", "EnvironmentStoreFront", "EnvironmentStoreRoom", "EnvironmentAmbientOcclusionShadow", "Splatter1", "Splatter2", "Splatter3", "Health", "UiArrow", "Pixel1x1", "TargetReticle", "Count", nullptr };
  return names;
}

inline const char *EnumNameRenderableId(RenderableId e) { return EnumNamesRenderableId()[e]; }

enum EventId {
  EventId_TakeDamage = 0,
  EventId_ReleasePie = 1,
  EventId_DeflectPie = 2,
  EventId_JumpWhileJoining = 3,
  EventId_LoadPie = 4
};

inline const char **EnumNamesEventId() {
  static const char *names[] = { "TakeDamage", "ReleasePie", "DeflectPie", "JumpWhileJoining", "LoadPie", nullptr };
  return names;
}

inline const char *EnumNameEventId(EventId e) { return EnumNamesEventId()[e]; }

enum Axis {
  Axis_X = 0,
  Axis_Y = 1,
  Axis_Z = 2
};

inline const char **EnumNamesAxis() {
  static const char *names[] = { "X", "Y", "Z", nullptr };
  return names;
}

inline const char *EnumNameAxis(Axis e) { return EnumNamesAxis()[e]; }

MANUALLY_ALIGNED_STRUCT(4) Vec2i FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  Vec2i(int32_t x, int32_t y)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)) { }

  int32_t x() const { return flatbuffers::EndianScalar(x_); }
  int32_t y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(Vec2i, 8);

MANUALLY_ALIGNED_STRUCT(4) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;

 public:
  Vec2(float x, float y)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(Vec2, 8);

MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3(float x, float y, float z)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), z_(flatbuffers::EndianScalar(z)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
};
STRUCT_END(Vec3, 12);

MANUALLY_ALIGNED_STRUCT(4) Vec4 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Vec4(float x, float y, float z, float w)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), z_(flatbuffers::EndianScalar(z)), w_(flatbuffers::EndianScalar(w)) { }

  float x() const { return flatbuffers::EndianScalar(x_); }
  float y() const { return flatbuffers::EndianScalar(y_); }
  float z() const { return flatbuffers::EndianScalar(z_); }
  float w() const { return flatbuffers::EndianScalar(w_); }
};
STRUCT_END(Vec4, 16);

MANUALLY_ALIGNED_STRUCT(1) Vec4ub FLATBUFFERS_FINAL_CLASS {
 private:
  uint8_t x_;
  uint8_t y_;
  uint8_t z_;
  uint8_t w_;

 public:
  Vec4ub(uint8_t x, uint8_t y, uint8_t z, uint8_t w)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)), z_(flatbuffers::EndianScalar(z)), w_(flatbuffers::EndianScalar(w)) { }

  uint8_t x() const { return flatbuffers::EndianScalar(x_); }
  uint8_t y() const { return flatbuffers::EndianScalar(y_); }
  uint8_t z() const { return flatbuffers::EndianScalar(z_); }
  uint8_t w() const { return flatbuffers::EndianScalar(w_); }
};
STRUCT_END(Vec4ub, 4);

}  // namespace pie_noon
}  // namespace fpl

#endif  // FLATBUFFERS_GENERATED_PIENOONCOMMON_FPL_PIE_NOON_H_
