// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_PARTICLES_FPL_H_
#define FLATBUFFERS_GENERATED_PARTICLES_FPL_H_

#include "flatbuffers/flatbuffers.h"

#include "pie_noon_common_generated.h"

namespace fpl {
namespace pie_noon {
struct Vec2i;
struct Vec2;
struct Vec3;
struct Vec4;
struct Vec4ub;
}  // namespace pie_noon
}  // namespace fpl

namespace fpl {

struct ParticleDef;

struct ParticleDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fpl::pie_noon::Vec3 *min_scale() const { return GetStruct<const fpl::pie_noon::Vec3 *>(4); }
  const fpl::pie_noon::Vec3 *max_scale() const { return GetStruct<const fpl::pie_noon::Vec3 *>(6); }
  uint8_t preserve_aspect() const { return GetField<uint8_t>(8, 0); }
  const fpl::pie_noon::Vec3 *min_velocity() const { return GetStruct<const fpl::pie_noon::Vec3 *>(10); }
  const fpl::pie_noon::Vec3 *max_velocity() const { return GetStruct<const fpl::pie_noon::Vec3 *>(12); }
  const fpl::pie_noon::Vec3 *min_position_offset() const { return GetStruct<const fpl::pie_noon::Vec3 *>(14); }
  const fpl::pie_noon::Vec3 *max_position_offset() const { return GetStruct<const fpl::pie_noon::Vec3 *>(16); }
  const fpl::pie_noon::Vec3 *min_orientation_offset() const { return GetStruct<const fpl::pie_noon::Vec3 *>(18); }
  const fpl::pie_noon::Vec3 *max_orientation_offset() const { return GetStruct<const fpl::pie_noon::Vec3 *>(20); }
  const fpl::pie_noon::Vec3 *min_angular_velocity() const { return GetStruct<const fpl::pie_noon::Vec3 *>(22); }
  const fpl::pie_noon::Vec3 *max_angular_velocity() const { return GetStruct<const fpl::pie_noon::Vec3 *>(24); }
  int32_t min_duration() const { return GetField<int32_t>(26, 0); }
  int32_t max_duration() const { return GetField<int32_t>(28, 0); }
  int32_t shrink_duration() const { return GetField<int32_t>(30, 0); }
  int32_t fade_duration() const { return GetField<int32_t>(32, 0); }
  const fpl::pie_noon::Vec3 *acceleration() const { return GetStruct<const fpl::pie_noon::Vec3 *>(34); }
  const flatbuffers::Vector<const fpl::pie_noon::Vec4 *> *tint() const { return GetPointer<const flatbuffers::Vector<const fpl::pie_noon::Vec4 *> *>(36); }
  const flatbuffers::Vector<uint16_t> *renderable() const { return GetPointer<const flatbuffers::Vector<uint16_t> *>(38); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 4 /* min_scale */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 6 /* max_scale */) &&
           VerifyField<uint8_t>(verifier, 8 /* preserve_aspect */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 10 /* min_velocity */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 12 /* max_velocity */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 14 /* min_position_offset */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 16 /* max_position_offset */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 18 /* min_orientation_offset */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 20 /* max_orientation_offset */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 22 /* min_angular_velocity */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 24 /* max_angular_velocity */) &&
           VerifyField<int32_t>(verifier, 26 /* min_duration */) &&
           VerifyField<int32_t>(verifier, 28 /* max_duration */) &&
           VerifyField<int32_t>(verifier, 30 /* shrink_duration */) &&
           VerifyField<int32_t>(verifier, 32 /* fade_duration */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 34 /* acceleration */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 36 /* tint */) &&
           verifier.Verify(tint()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 38 /* renderable */) &&
           verifier.Verify(renderable()) &&
           verifier.EndTable();
  }
};

struct ParticleDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_min_scale(const fpl::pie_noon::Vec3 *min_scale) { fbb_.AddStruct(4, min_scale); }
  void add_max_scale(const fpl::pie_noon::Vec3 *max_scale) { fbb_.AddStruct(6, max_scale); }
  void add_preserve_aspect(uint8_t preserve_aspect) { fbb_.AddElement<uint8_t>(8, preserve_aspect, 0); }
  void add_min_velocity(const fpl::pie_noon::Vec3 *min_velocity) { fbb_.AddStruct(10, min_velocity); }
  void add_max_velocity(const fpl::pie_noon::Vec3 *max_velocity) { fbb_.AddStruct(12, max_velocity); }
  void add_min_position_offset(const fpl::pie_noon::Vec3 *min_position_offset) { fbb_.AddStruct(14, min_position_offset); }
  void add_max_position_offset(const fpl::pie_noon::Vec3 *max_position_offset) { fbb_.AddStruct(16, max_position_offset); }
  void add_min_orientation_offset(const fpl::pie_noon::Vec3 *min_orientation_offset) { fbb_.AddStruct(18, min_orientation_offset); }
  void add_max_orientation_offset(const fpl::pie_noon::Vec3 *max_orientation_offset) { fbb_.AddStruct(20, max_orientation_offset); }
  void add_min_angular_velocity(const fpl::pie_noon::Vec3 *min_angular_velocity) { fbb_.AddStruct(22, min_angular_velocity); }
  void add_max_angular_velocity(const fpl::pie_noon::Vec3 *max_angular_velocity) { fbb_.AddStruct(24, max_angular_velocity); }
  void add_min_duration(int32_t min_duration) { fbb_.AddElement<int32_t>(26, min_duration, 0); }
  void add_max_duration(int32_t max_duration) { fbb_.AddElement<int32_t>(28, max_duration, 0); }
  void add_shrink_duration(int32_t shrink_duration) { fbb_.AddElement<int32_t>(30, shrink_duration, 0); }
  void add_fade_duration(int32_t fade_duration) { fbb_.AddElement<int32_t>(32, fade_duration, 0); }
  void add_acceleration(const fpl::pie_noon::Vec3 *acceleration) { fbb_.AddStruct(34, acceleration); }
  void add_tint(flatbuffers::Offset<flatbuffers::Vector<const fpl::pie_noon::Vec4 *>> tint) { fbb_.AddOffset(36, tint); }
  void add_renderable(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> renderable) { fbb_.AddOffset(38, renderable); }
  ParticleDefBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ParticleDefBuilder &operator=(const ParticleDefBuilder &);
  flatbuffers::Offset<ParticleDef> Finish() {
    auto o = flatbuffers::Offset<ParticleDef>(fbb_.EndTable(start_, 18));
    return o;
  }
};

inline flatbuffers::Offset<ParticleDef> CreateParticleDef(flatbuffers::FlatBufferBuilder &_fbb,
   const fpl::pie_noon::Vec3 *min_scale = 0,
   const fpl::pie_noon::Vec3 *max_scale = 0,
   uint8_t preserve_aspect = 0,
   const fpl::pie_noon::Vec3 *min_velocity = 0,
   const fpl::pie_noon::Vec3 *max_velocity = 0,
   const fpl::pie_noon::Vec3 *min_position_offset = 0,
   const fpl::pie_noon::Vec3 *max_position_offset = 0,
   const fpl::pie_noon::Vec3 *min_orientation_offset = 0,
   const fpl::pie_noon::Vec3 *max_orientation_offset = 0,
   const fpl::pie_noon::Vec3 *min_angular_velocity = 0,
   const fpl::pie_noon::Vec3 *max_angular_velocity = 0,
   int32_t min_duration = 0,
   int32_t max_duration = 0,
   int32_t shrink_duration = 0,
   int32_t fade_duration = 0,
   const fpl::pie_noon::Vec3 *acceleration = 0,
   flatbuffers::Offset<flatbuffers::Vector<const fpl::pie_noon::Vec4 *>> tint = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint16_t>> renderable = 0) {
  ParticleDefBuilder builder_(_fbb);
  builder_.add_renderable(renderable);
  builder_.add_tint(tint);
  builder_.add_acceleration(acceleration);
  builder_.add_fade_duration(fade_duration);
  builder_.add_shrink_duration(shrink_duration);
  builder_.add_max_duration(max_duration);
  builder_.add_min_duration(min_duration);
  builder_.add_max_angular_velocity(max_angular_velocity);
  builder_.add_min_angular_velocity(min_angular_velocity);
  builder_.add_max_orientation_offset(max_orientation_offset);
  builder_.add_min_orientation_offset(min_orientation_offset);
  builder_.add_max_position_offset(max_position_offset);
  builder_.add_min_position_offset(min_position_offset);
  builder_.add_max_velocity(max_velocity);
  builder_.add_min_velocity(min_velocity);
  builder_.add_max_scale(max_scale);
  builder_.add_min_scale(min_scale);
  builder_.add_preserve_aspect(preserve_aspect);
  return builder_.Finish();
}

}  // namespace fpl

#endif  // FLATBUFFERS_GENERATED_PARTICLES_FPL_H_
