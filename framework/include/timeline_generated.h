// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_TIMELINE_FPL_H_
#define FLATBUFFERS_GENERATED_TIMELINE_FPL_H_

#include "flatbuffers/flatbuffers.h"

#include "pie_noon_common_generated.h"

namespace fpl {
namespace pie_noon {
struct Vec2i;
struct Vec2;
struct Vec3;
struct Vec4;
struct Vec4ub;
}  // namespace pie_noon
}  // namespace fpl

namespace fpl {

struct TimelineRenderable;
struct PixelOffset;
struct TimelineAccessory;
struct TimelineSound;
struct TimelineEvent;
struct Timeline;

MANUALLY_ALIGNED_STRUCT(2) TimelineRenderable FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t time_;
  uint16_t renderable_;

 public:
  TimelineRenderable(uint16_t time, uint16_t renderable)
    : time_(flatbuffers::EndianScalar(time)), renderable_(flatbuffers::EndianScalar(renderable)) { }

  uint16_t time() const { return flatbuffers::EndianScalar(time_); }
  uint16_t renderable() const { return flatbuffers::EndianScalar(renderable_); }
};
STRUCT_END(TimelineRenderable, 4);

MANUALLY_ALIGNED_STRUCT(2) PixelOffset FLATBUFFERS_FINAL_CLASS {
 private:
  int16_t x_;
  int16_t y_;

 public:
  PixelOffset(int16_t x, int16_t y)
    : x_(flatbuffers::EndianScalar(x)), y_(flatbuffers::EndianScalar(y)) { }

  int16_t x() const { return flatbuffers::EndianScalar(x_); }
  int16_t y() const { return flatbuffers::EndianScalar(y_); }
};
STRUCT_END(PixelOffset, 4);

MANUALLY_ALIGNED_STRUCT(2) TimelineAccessory FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t time_;
  uint16_t end_time_;
  uint16_t renderable_;
  PixelOffset offset_;

 public:
  TimelineAccessory(uint16_t time, uint16_t end_time, uint16_t renderable, const PixelOffset &offset)
    : time_(flatbuffers::EndianScalar(time)), end_time_(flatbuffers::EndianScalar(end_time)), renderable_(flatbuffers::EndianScalar(renderable)), offset_(offset) { }

  uint16_t time() const { return flatbuffers::EndianScalar(time_); }
  uint16_t end_time() const { return flatbuffers::EndianScalar(end_time_); }
  uint16_t renderable() const { return flatbuffers::EndianScalar(renderable_); }
  const PixelOffset &offset() const { return offset_; }
};
STRUCT_END(TimelineAccessory, 10);

MANUALLY_ALIGNED_STRUCT(2) TimelineEvent FLATBUFFERS_FINAL_CLASS {
 private:
  uint16_t time_;
  uint16_t event_;
  uint16_t modifier_;

 public:
  TimelineEvent(uint16_t time, uint16_t event, uint16_t modifier)
    : time_(flatbuffers::EndianScalar(time)), event_(flatbuffers::EndianScalar(event)), modifier_(flatbuffers::EndianScalar(modifier)) { }

  uint16_t time() const { return flatbuffers::EndianScalar(time_); }
  uint16_t event() const { return flatbuffers::EndianScalar(event_); }
  uint16_t modifier() const { return flatbuffers::EndianScalar(modifier_); }
};
STRUCT_END(TimelineEvent, 6);

struct TimelineSound FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint16_t time() const { return GetField<uint16_t>(4, 0); }
  const flatbuffers::String *sound() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* time */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* sound */) &&
           verifier.Verify(sound()) &&
           verifier.EndTable();
  }
};

struct TimelineSoundBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_time(uint16_t time) { fbb_.AddElement<uint16_t>(4, time, 0); }
  void add_sound(flatbuffers::Offset<flatbuffers::String> sound) { fbb_.AddOffset(6, sound); }
  TimelineSoundBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimelineSoundBuilder &operator=(const TimelineSoundBuilder &);
  flatbuffers::Offset<TimelineSound> Finish() {
    auto o = flatbuffers::Offset<TimelineSound>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<TimelineSound> CreateTimelineSound(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t time = 0,
   flatbuffers::Offset<flatbuffers::String> sound = 0) {
  TimelineSoundBuilder builder_(_fbb);
  builder_.add_sound(sound);
  builder_.add_time(time);
  return builder_.Finish();
}

struct Timeline FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint16_t end_time() const { return GetField<uint16_t>(4, 0); }
  const flatbuffers::Vector<const TimelineRenderable *> *renderables() const { return GetPointer<const flatbuffers::Vector<const TimelineRenderable *> *>(6); }
  const flatbuffers::Vector<const TimelineAccessory *> *accessories() const { return GetPointer<const flatbuffers::Vector<const TimelineAccessory *> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<TimelineSound>> *sounds() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TimelineSound>> *>(10); }
  const flatbuffers::Vector<const TimelineEvent *> *events() const { return GetPointer<const flatbuffers::Vector<const TimelineEvent *> *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* end_time */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* renderables */) &&
           verifier.Verify(renderables()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* accessories */) &&
           verifier.Verify(accessories()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* sounds */) &&
           verifier.Verify(sounds()) &&
           verifier.VerifyVectorOfTables(sounds()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* events */) &&
           verifier.Verify(events()) &&
           verifier.EndTable();
  }
};

struct TimelineBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_end_time(uint16_t end_time) { fbb_.AddElement<uint16_t>(4, end_time, 0); }
  void add_renderables(flatbuffers::Offset<flatbuffers::Vector<const TimelineRenderable *>> renderables) { fbb_.AddOffset(6, renderables); }
  void add_accessories(flatbuffers::Offset<flatbuffers::Vector<const TimelineAccessory *>> accessories) { fbb_.AddOffset(8, accessories); }
  void add_sounds(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TimelineSound>>> sounds) { fbb_.AddOffset(10, sounds); }
  void add_events(flatbuffers::Offset<flatbuffers::Vector<const TimelineEvent *>> events) { fbb_.AddOffset(12, events); }
  TimelineBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TimelineBuilder &operator=(const TimelineBuilder &);
  flatbuffers::Offset<Timeline> Finish() {
    auto o = flatbuffers::Offset<Timeline>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<Timeline> CreateTimeline(flatbuffers::FlatBufferBuilder &_fbb,
   uint16_t end_time = 0,
   flatbuffers::Offset<flatbuffers::Vector<const TimelineRenderable *>> renderables = 0,
   flatbuffers::Offset<flatbuffers::Vector<const TimelineAccessory *>> accessories = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TimelineSound>>> sounds = 0,
   flatbuffers::Offset<flatbuffers::Vector<const TimelineEvent *>> events = 0) {
  TimelineBuilder builder_(_fbb);
  builder_.add_events(events);
  builder_.add_sounds(sounds);
  builder_.add_accessories(accessories);
  builder_.add_renderables(renderables);
  builder_.add_end_time(end_time);
  return builder_.Finish();
}

inline const fpl::Timeline *GetTimeline(const void *buf) { return flatbuffers::GetRoot<fpl::Timeline>(buf); }

inline bool VerifyTimelineBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpl::Timeline>(); }

inline void FinishTimelineBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpl::Timeline> root) { fbb.Finish(root); }

}  // namespace fpl

#endif  // FLATBUFFERS_GENERATED_TIMELINE_FPL_H_
