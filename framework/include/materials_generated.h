// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_MATERIALS_MATDEF_H_
#define FLATBUFFERS_GENERATED_MATERIALS_MATDEF_H_

#include "flatbuffers/flatbuffers.h"


namespace matdef {

struct Material;

enum BlendMode {
  BlendMode_OFF = 0,
  BlendMode_TEST = 1,
  BlendMode_ALPHA = 2,
  BlendMode_ADD = 3,
  BlendMode_ADDALPHA = 4,
  BlendMode_MULTIPLY = 5
};

inline const char **EnumNamesBlendMode() {
  static const char *names[] = { "OFF", "TEST", "ALPHA", "ADD", "ADDALPHA", "MULTIPLY", nullptr };
  return names;
}

inline const char *EnumNameBlendMode(BlendMode e) { return EnumNamesBlendMode()[e]; }

enum TextureFormat {
  TextureFormat_AUTO = 0,
  TextureFormat_F_8888 = 1,
  TextureFormat_F_888 = 2,
  TextureFormat_F_5551 = 3,
  TextureFormat_F_565 = 4
};

inline const char **EnumNamesTextureFormat() {
  static const char *names[] = { "AUTO", "F_8888", "F_888", "F_5551", "F_565", nullptr };
  return names;
}

inline const char *EnumNameTextureFormat(TextureFormat e) { return EnumNamesTextureFormat()[e]; }

struct Material FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *texture_filenames() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(4); }
  BlendMode blendmode() const { return static_cast<BlendMode>(GetField<uint8_t>(6, 0)); }
  const flatbuffers::Vector<uint8_t> *desired_format() const { return GetPointer<const flatbuffers::Vector<uint8_t> *>(8); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* texture_filenames */) &&
           verifier.Verify(texture_filenames()) &&
           verifier.VerifyVectorOfStrings(texture_filenames()) &&
           VerifyField<uint8_t>(verifier, 6 /* blendmode */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* desired_format */) &&
           verifier.Verify(desired_format()) &&
           verifier.EndTable();
  }
};

struct MaterialBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_texture_filenames(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> texture_filenames) { fbb_.AddOffset(4, texture_filenames); }
  void add_blendmode(BlendMode blendmode) { fbb_.AddElement<uint8_t>(6, static_cast<uint8_t>(blendmode), 0); }
  void add_desired_format(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> desired_format) { fbb_.AddOffset(8, desired_format); }
  MaterialBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MaterialBuilder &operator=(const MaterialBuilder &);
  flatbuffers::Offset<Material> Finish() {
    auto o = flatbuffers::Offset<Material>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<Material> CreateMaterial(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> texture_filenames = 0,
   BlendMode blendmode = BlendMode_OFF,
   flatbuffers::Offset<flatbuffers::Vector<uint8_t>> desired_format = 0) {
  MaterialBuilder builder_(_fbb);
  builder_.add_desired_format(desired_format);
  builder_.add_texture_filenames(texture_filenames);
  builder_.add_blendmode(blendmode);
  return builder_.Finish();
}

inline const matdef::Material *GetMaterial(const void *buf) { return flatbuffers::GetRoot<matdef::Material>(buf); }

inline bool VerifyMaterialBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<matdef::Material>(); }

inline void FinishMaterialBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<matdef::Material> root) { fbb.Finish(root); }

}  // namespace matdef

#endif  // FLATBUFFERS_GENERATED_MATERIALS_MATDEF_H_
