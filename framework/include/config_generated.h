// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_CONFIG_FPL_PIE_NOON_H_
#define FLATBUFFERS_GENERATED_CONFIG_FPL_PIE_NOON_H_

#include "flatbuffers/flatbuffers.h"

#include "components_generated.h"
#include "particles_generated.h"
#include "pie_noon_common_generated.h"
#include "scoring_rules_generated.h"
#include "audio_config_generated.h"
#include "motive_generated.h"

namespace pindrop {
struct AudioConfig;
}  // namespace pindrop
namespace fpl {
namespace pie_noon {
struct Vec2i;
struct Vec2;
struct Vec3;
struct Vec4;
struct Vec4ub;
}  // namespace pie_noon
}  // namespace fpl
namespace motive {
struct Settled1fParameters;
struct ModularParameters;
struct OvershootParameters;
struct SmoothParameters;
struct TwitchParameters;
}  // namespace motive
namespace fpl {
namespace pie_noon {
struct SceneObjectDef;
struct PlayerCharacterDef;
struct CardboardPlayerDef;
struct DripAndVanishDef;
struct MotivatorObjectDef;
struct ShakeablePropDef;
struct CardboardSceneryDef;
struct ComponentDefInstance;
struct EntityDefinition;
}  // namespace pie_noon
}  // namespace fpl
namespace fpl {
struct ParticleDef;
}  // namespace fpl
namespace fpl {
namespace pie_noon {
struct Rule;
struct ScoringRules;
}  // namespace pie_noon
}  // namespace fpl

namespace fpl {
namespace pie_noon {

struct ButtonTexture;
struct ButtonDef;
struct StaticImageDef;
struct ImguiButtonDef;
struct StartGroupDef;
struct EndGroupDef;
struct ImguiWidget;
struct UiGroup;
struct FixedAccessory;
struct AccessoryGroup;
struct CharacterData;
struct CardboardFigure;
struct CharacterArrangement;
struct CameraMovementToSubject;
struct TurnLengthSpec;
struct MultiscreenOptions;
struct Config;

enum Orientation {
  Orientation_Vertical = 0,
  Orientation_Horizontal = 1
};

inline const char **EnumNamesOrientation() {
  static const char *names[] = { "Vertical", "Horizontal", nullptr };
  return names;
}

inline const char *EnumNameOrientation(Orientation e) { return EnumNamesOrientation()[e]; }

enum PieDeflectionMode {
  PieDeflectionMode_ToTargetOfTarget = 0,
  PieDeflectionMode_ToSource = 1,
  PieDeflectionMode_ToRandom = 2
};

inline const char **EnumNamesPieDeflectionMode() {
  static const char *names[] = { "ToTargetOfTarget", "ToSource", "ToRandom", nullptr };
  return names;
}

inline const char *EnumNamePieDeflectionMode(PieDeflectionMode e) { return EnumNamesPieDeflectionMode()[e]; }

enum ButtonId {
  ButtonId_Undefined = 0,
  ButtonId_InvalidInput = 1,
  ButtonId_Cancel = 2,
  ButtonId_Left = 3,
  ButtonId_Right = 4,
  ButtonId_Attack = 5,
  ButtonId_Defend = 6,
  ButtonId_MenuStart = 7,
  ButtonId_MenuSignIn = 8,
  ButtonId_MenuSignInText = 9,
  ButtonId_MenuExtras = 10,
  ButtonId_MenuLicense = 11,
  ButtonId_MenuAchievements = 12,
  ButtonId_MenuLeaderboard = 13,
  ButtonId_MenuHowToPlay = 14,
  ButtonId_MenuResume = 15,
  ButtonId_MenuAbout = 16,
  ButtonId_MenuBack = 17,
  ButtonId_MenuMultiScreen = 18,
  ButtonId_MenuMultiScreenHost = 19,
  ButtonId_MenuMultiScreenJoin = 20,
  ButtonId_MenuCardboard = 21,
  ButtonId_MenuGameModes = 22,
  ButtonId_Counter1 = 23,
  ButtonId_Counter2 = 24,
  ButtonId_Counter3 = 25,
  ButtonId_Counter4 = 26,
  ButtonId_Counter5 = 27,
  ButtonId_Multiplayer_Button1 = 28,
  ButtonId_Multiplayer_Button2 = 29,
  ButtonId_Multiplayer_Button3 = 30,
  ButtonId_Multiplayer_Button4 = 31,
  ButtonId_Multiplayer_Look = 32,
  ButtonId_Multiplayer_Go = 33,
  ButtonId_Multiplayer_NumPlayers = 34,
  ButtonId_Multiplayer_Label1 = 35,
  ButtonId_Multiplayer_Label2 = 36,
  ButtonId_Multiplayer_Label3 = 37,
  ButtonId_Multiplayer_Label4 = 38,
  ButtonId_Multiplayer_Splat1 = 39,
  ButtonId_Multiplayer_Splat2 = 40,
  ButtonId_Multiplayer_Splat3 = 41,
  ButtonId_Multiplayer_Splat4 = 42,
  ButtonId_Multiplayer_SplatFull = 43
};

inline const char **EnumNamesButtonId() {
  static const char *names[] = { "Undefined", "InvalidInput", "Cancel", "Left", "Right", "Attack", "Defend", "MenuStart", "MenuSignIn", "MenuSignInText", "MenuExtras", "MenuLicense", "MenuAchievements", "MenuLeaderboard", "MenuHowToPlay", "MenuResume", "MenuAbout", "MenuBack", "MenuMultiScreen", "MenuMultiScreenHost", "MenuMultiScreenJoin", "MenuCardboard", "MenuGameModes", "Counter1", "Counter2", "Counter3", "Counter4", "Counter5", "Multiplayer_Button1", "Multiplayer_Button2", "Multiplayer_Button3", "Multiplayer_Button4", "Multiplayer_Look", "Multiplayer_Go", "Multiplayer_NumPlayers", "Multiplayer_Label1", "Multiplayer_Label2", "Multiplayer_Label3", "Multiplayer_Label4", "Multiplayer_Splat1", "Multiplayer_Splat2", "Multiplayer_Splat3", "Multiplayer_Splat4", "Multiplayer_SplatFull", nullptr };
  return names;
}

inline const char *EnumNameButtonId(ButtonId e) { return EnumNamesButtonId()[e]; }

enum ButtonEvent {
  ButtonEvent_ButtonPress = 1,
  ButtonEvent_ButtonUp = 2,
  ButtonEvent_ButtonHold = 4
};

inline const char **EnumNamesButtonEvent() {
  static const char *names[] = { "ButtonPress", "ButtonUp", "", "ButtonHold", nullptr };
  return names;
}

inline const char *EnumNameButtonEvent(ButtonEvent e) { return EnumNamesButtonEvent()[e - ButtonEvent_ButtonPress]; }

enum GameMode {
  GameMode_Survival = 0,
  GameMode_HighScore = 1,
  GameMode_ReachTarget = 2
};

inline const char **EnumNamesGameMode() {
  static const char *names[] = { "Survival", "HighScore", "ReachTarget", nullptr };
  return names;
}

inline const char *EnumNameGameMode(GameMode e) { return EnumNamesGameMode()[e]; }

enum GroupLayout {
  GroupLayout_GroupLayoutHorizontalTop = 0,
  GroupLayout_GroupLayoutHorizontalCenter = 1,
  GroupLayout_GroupLayoutHorizontalBottom = 2,
  GroupLayout_GroupLayoutVerticalLeft = 3,
  GroupLayout_GroupLayoutVerticalCenter = 4,
  GroupLayout_GroupLayoutVerticalRight = 5
};

inline const char **EnumNamesGroupLayout() {
  static const char *names[] = { "GroupLayoutHorizontalTop", "GroupLayoutHorizontalCenter", "GroupLayoutHorizontalBottom", "GroupLayoutVerticalLeft", "GroupLayoutVerticalCenter", "GroupLayoutVerticalRight", nullptr };
  return names;
}

inline const char *EnumNameGroupLayout(GroupLayout e) { return EnumNamesGroupLayout()[e]; }

enum ImguiWidgetUnion {
  ImguiWidgetUnion_NONE = 0,
  ImguiWidgetUnion_StartGroupDef = 1,
  ImguiWidgetUnion_ImguiButtonDef = 2,
  ImguiWidgetUnion_EndGroupDef = 3
};

inline const char **EnumNamesImguiWidgetUnion() {
  static const char *names[] = { "NONE", "StartGroupDef", "ImguiButtonDef", "EndGroupDef", nullptr };
  return names;
}

inline const char *EnumNameImguiWidgetUnion(ImguiWidgetUnion e) { return EnumNamesImguiWidgetUnion()[e]; }

inline bool VerifyImguiWidgetUnion(flatbuffers::Verifier &verifier, const void *union_obj, ImguiWidgetUnion type);

struct ButtonTexture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *standard() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *touch_screen() const { return GetPointer<const flatbuffers::String *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* standard */) &&
           verifier.Verify(standard()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* touch_screen */) &&
           verifier.Verify(touch_screen()) &&
           verifier.EndTable();
  }
};

struct ButtonTextureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_standard(flatbuffers::Offset<flatbuffers::String> standard) { fbb_.AddOffset(4, standard); }
  void add_touch_screen(flatbuffers::Offset<flatbuffers::String> touch_screen) { fbb_.AddOffset(6, touch_screen); }
  ButtonTextureBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ButtonTextureBuilder &operator=(const ButtonTextureBuilder &);
  flatbuffers::Offset<ButtonTexture> Finish() {
    auto o = flatbuffers::Offset<ButtonTexture>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ButtonTexture> CreateButtonTexture(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> standard = 0,
   flatbuffers::Offset<flatbuffers::String> touch_screen = 0) {
  ButtonTextureBuilder builder_(_fbb);
  builder_.add_touch_screen(touch_screen);
  builder_.add_standard(standard);
  return builder_.Finish();
}

struct ButtonDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  ButtonId ID() const { return static_cast<ButtonId>(GetField<uint16_t>(4, 0)); }
  const fpl::pie_noon::Vec2 *top_left() const { return GetStruct<const fpl::pie_noon::Vec2 *>(6); }
  const fpl::pie_noon::Vec2 *bottom_right() const { return GetStruct<const fpl::pie_noon::Vec2 *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<ButtonTexture>> *texture_normal() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ButtonTexture>> *>(10); }
  const ButtonTexture *texture_pressed() const { return GetPointer<const ButtonTexture *>(12); }
  const flatbuffers::String *texture_selected() const { return GetPointer<const flatbuffers::String *>(14); }
  const fpl::pie_noon::Vec2 *draw_scale_normal() const { return GetStruct<const fpl::pie_noon::Vec2 *>(16); }
  const fpl::pie_noon::Vec2 *draw_scale_pressed() const { return GetStruct<const fpl::pie_noon::Vec2 *>(18); }
  const fpl::pie_noon::Vec2 *draw_scale_highlighted() const { return GetStruct<const fpl::pie_noon::Vec2 *>(20); }
  const flatbuffers::String *shader() const { return GetPointer<const flatbuffers::String *>(22); }
  const flatbuffers::String *inactive_shader() const { return GetPointer<const flatbuffers::String *>(24); }
  const flatbuffers::Vector<uint16_t> *nav_up() const { return GetPointer<const flatbuffers::Vector<uint16_t> *>(26); }
  const flatbuffers::Vector<uint16_t> *nav_down() const { return GetPointer<const flatbuffers::Vector<uint16_t> *>(28); }
  const flatbuffers::Vector<uint16_t> *nav_left() const { return GetPointer<const flatbuffers::Vector<uint16_t> *>(30); }
  const flatbuffers::Vector<uint16_t> *nav_right() const { return GetPointer<const flatbuffers::Vector<uint16_t> *>(32); }
  const fpl::pie_noon::Vec2 *texture_position() const { return GetStruct<const fpl::pie_noon::Vec2 *>(34); }
  uint8_t starts_active() const { return GetField<uint8_t>(36, 1); }
  ButtonEvent event_trigger() const { return static_cast<ButtonEvent>(GetField<uint16_t>(38, 1)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* ID */) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 6 /* top_left */) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 8 /* bottom_right */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* texture_normal */) &&
           verifier.Verify(texture_normal()) &&
           verifier.VerifyVectorOfTables(texture_normal()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* texture_pressed */) &&
           verifier.VerifyTable(texture_pressed()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* texture_selected */) &&
           verifier.Verify(texture_selected()) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 16 /* draw_scale_normal */) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 18 /* draw_scale_pressed */) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 20 /* draw_scale_highlighted */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 22 /* shader */) &&
           verifier.Verify(shader()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 24 /* inactive_shader */) &&
           verifier.Verify(inactive_shader()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 26 /* nav_up */) &&
           verifier.Verify(nav_up()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 28 /* nav_down */) &&
           verifier.Verify(nav_down()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 30 /* nav_left */) &&
           verifier.Verify(nav_left()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 32 /* nav_right */) &&
           verifier.Verify(nav_right()) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 34 /* texture_position */) &&
           VerifyField<uint8_t>(verifier, 36 /* starts_active */) &&
           VerifyField<uint16_t>(verifier, 38 /* event_trigger */) &&
           verifier.EndTable();
  }
};

struct ButtonDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ID(ButtonId ID) { fbb_.AddElement<uint16_t>(4, static_cast<uint16_t>(ID), 0); }
  void add_top_left(const fpl::pie_noon::Vec2 *top_left) { fbb_.AddStruct(6, top_left); }
  void add_bottom_right(const fpl::pie_noon::Vec2 *bottom_right) { fbb_.AddStruct(8, bottom_right); }
  void add_texture_normal(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ButtonTexture>>> texture_normal) { fbb_.AddOffset(10, texture_normal); }
  void add_texture_pressed(flatbuffers::Offset<ButtonTexture> texture_pressed) { fbb_.AddOffset(12, texture_pressed); }
  void add_texture_selected(flatbuffers::Offset<flatbuffers::String> texture_selected) { fbb_.AddOffset(14, texture_selected); }
  void add_draw_scale_normal(const fpl::pie_noon::Vec2 *draw_scale_normal) { fbb_.AddStruct(16, draw_scale_normal); }
  void add_draw_scale_pressed(const fpl::pie_noon::Vec2 *draw_scale_pressed) { fbb_.AddStruct(18, draw_scale_pressed); }
  void add_draw_scale_highlighted(const fpl::pie_noon::Vec2 *draw_scale_highlighted) { fbb_.AddStruct(20, draw_scale_highlighted); }
  void add_shader(flatbuffers::Offset<flatbuffers::String> shader) { fbb_.AddOffset(22, shader); }
  void add_inactive_shader(flatbuffers::Offset<flatbuffers::String> inactive_shader) { fbb_.AddOffset(24, inactive_shader); }
  void add_nav_up(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> nav_up) { fbb_.AddOffset(26, nav_up); }
  void add_nav_down(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> nav_down) { fbb_.AddOffset(28, nav_down); }
  void add_nav_left(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> nav_left) { fbb_.AddOffset(30, nav_left); }
  void add_nav_right(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> nav_right) { fbb_.AddOffset(32, nav_right); }
  void add_texture_position(const fpl::pie_noon::Vec2 *texture_position) { fbb_.AddStruct(34, texture_position); }
  void add_starts_active(uint8_t starts_active) { fbb_.AddElement<uint8_t>(36, starts_active, 1); }
  void add_event_trigger(ButtonEvent event_trigger) { fbb_.AddElement<uint16_t>(38, static_cast<uint16_t>(event_trigger), 1); }
  ButtonDefBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ButtonDefBuilder &operator=(const ButtonDefBuilder &);
  flatbuffers::Offset<ButtonDef> Finish() {
    auto o = flatbuffers::Offset<ButtonDef>(fbb_.EndTable(start_, 18));
    return o;
  }
};

inline flatbuffers::Offset<ButtonDef> CreateButtonDef(flatbuffers::FlatBufferBuilder &_fbb,
   ButtonId ID = ButtonId_Undefined,
   const fpl::pie_noon::Vec2 *top_left = 0,
   const fpl::pie_noon::Vec2 *bottom_right = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ButtonTexture>>> texture_normal = 0,
   flatbuffers::Offset<ButtonTexture> texture_pressed = 0,
   flatbuffers::Offset<flatbuffers::String> texture_selected = 0,
   const fpl::pie_noon::Vec2 *draw_scale_normal = 0,
   const fpl::pie_noon::Vec2 *draw_scale_pressed = 0,
   const fpl::pie_noon::Vec2 *draw_scale_highlighted = 0,
   flatbuffers::Offset<flatbuffers::String> shader = 0,
   flatbuffers::Offset<flatbuffers::String> inactive_shader = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint16_t>> nav_up = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint16_t>> nav_down = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint16_t>> nav_left = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint16_t>> nav_right = 0,
   const fpl::pie_noon::Vec2 *texture_position = 0,
   uint8_t starts_active = 1,
   ButtonEvent event_trigger = ButtonEvent_ButtonPress) {
  ButtonDefBuilder builder_(_fbb);
  builder_.add_texture_position(texture_position);
  builder_.add_nav_right(nav_right);
  builder_.add_nav_left(nav_left);
  builder_.add_nav_down(nav_down);
  builder_.add_nav_up(nav_up);
  builder_.add_inactive_shader(inactive_shader);
  builder_.add_shader(shader);
  builder_.add_draw_scale_highlighted(draw_scale_highlighted);
  builder_.add_draw_scale_pressed(draw_scale_pressed);
  builder_.add_draw_scale_normal(draw_scale_normal);
  builder_.add_texture_selected(texture_selected);
  builder_.add_texture_pressed(texture_pressed);
  builder_.add_texture_normal(texture_normal);
  builder_.add_bottom_right(bottom_right);
  builder_.add_top_left(top_left);
  builder_.add_event_trigger(event_trigger);
  builder_.add_ID(ID);
  builder_.add_starts_active(starts_active);
  return builder_.Finish();
}

struct StaticImageDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  ButtonId ID() const { return static_cast<ButtonId>(GetField<uint16_t>(4, 0)); }
  const flatbuffers::Vector<flatbuffers::Offset<ButtonTexture>> *texture() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ButtonTexture>> *>(6); }
  const flatbuffers::String *shader() const { return GetPointer<const flatbuffers::String *>(8); }
  const fpl::pie_noon::Vec2 *draw_scale() const { return GetStruct<const fpl::pie_noon::Vec2 *>(10); }
  const fpl::pie_noon::Vec2 *texture_position() const { return GetStruct<const fpl::pie_noon::Vec2 *>(12); }
  float z_depth() const { return GetField<float>(14, -0.5); }
  uint8_t visible() const { return GetField<uint8_t>(16, 1); }
  uint8_t render_after_buttons() const { return GetField<uint8_t>(18, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* ID */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* texture */) &&
           verifier.Verify(texture()) &&
           verifier.VerifyVectorOfTables(texture()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* shader */) &&
           verifier.Verify(shader()) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 10 /* draw_scale */) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 12 /* texture_position */) &&
           VerifyField<float>(verifier, 14 /* z_depth */) &&
           VerifyField<uint8_t>(verifier, 16 /* visible */) &&
           VerifyField<uint8_t>(verifier, 18 /* render_after_buttons */) &&
           verifier.EndTable();
  }
};

struct StaticImageDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ID(ButtonId ID) { fbb_.AddElement<uint16_t>(4, static_cast<uint16_t>(ID), 0); }
  void add_texture(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ButtonTexture>>> texture) { fbb_.AddOffset(6, texture); }
  void add_shader(flatbuffers::Offset<flatbuffers::String> shader) { fbb_.AddOffset(8, shader); }
  void add_draw_scale(const fpl::pie_noon::Vec2 *draw_scale) { fbb_.AddStruct(10, draw_scale); }
  void add_texture_position(const fpl::pie_noon::Vec2 *texture_position) { fbb_.AddStruct(12, texture_position); }
  void add_z_depth(float z_depth) { fbb_.AddElement<float>(14, z_depth, -0.5); }
  void add_visible(uint8_t visible) { fbb_.AddElement<uint8_t>(16, visible, 1); }
  void add_render_after_buttons(uint8_t render_after_buttons) { fbb_.AddElement<uint8_t>(18, render_after_buttons, 0); }
  StaticImageDefBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StaticImageDefBuilder &operator=(const StaticImageDefBuilder &);
  flatbuffers::Offset<StaticImageDef> Finish() {
    auto o = flatbuffers::Offset<StaticImageDef>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<StaticImageDef> CreateStaticImageDef(flatbuffers::FlatBufferBuilder &_fbb,
   ButtonId ID = ButtonId_Undefined,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ButtonTexture>>> texture = 0,
   flatbuffers::Offset<flatbuffers::String> shader = 0,
   const fpl::pie_noon::Vec2 *draw_scale = 0,
   const fpl::pie_noon::Vec2 *texture_position = 0,
   float z_depth = -0.5,
   uint8_t visible = 1,
   uint8_t render_after_buttons = 0) {
  StaticImageDefBuilder builder_(_fbb);
  builder_.add_z_depth(z_depth);
  builder_.add_texture_position(texture_position);
  builder_.add_draw_scale(draw_scale);
  builder_.add_shader(shader);
  builder_.add_texture(texture);
  builder_.add_ID(ID);
  builder_.add_render_after_buttons(render_after_buttons);
  builder_.add_visible(visible);
  return builder_.Finish();
}

struct ImguiButtonDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  ButtonId ID() const { return static_cast<ButtonId>(GetField<uint16_t>(4, 0)); }
  float size() const { return GetField<float>(6, 0); }
  const fpl::pie_noon::Vec4 *margin() const { return GetStruct<const fpl::pie_noon::Vec4 *>(8); }
  const flatbuffers::String *texture_foreground() const { return GetPointer<const flatbuffers::String *>(10); }
  const flatbuffers::String *texture_background() const { return GetPointer<const flatbuffers::String *>(12); }
  const fpl::pie_noon::Vec2 *foreground_position() const { return GetStruct<const fpl::pie_noon::Vec2 *>(14); }
  float foreground_size_pressed() const { return GetField<float>(16, 0); }
  float foreground_size_focus() const { return GetField<float>(18, 1.0); }
  float foreground_size() const { return GetField<float>(20, 0); }
  const fpl::pie_noon::Vec2 *draw_scale_normal() const { return GetStruct<const fpl::pie_noon::Vec2 *>(22); }
  const fpl::pie_noon::Vec2 *draw_scale_pressed() const { return GetStruct<const fpl::pie_noon::Vec2 *>(24); }
  ButtonEvent event_trigger() const { return static_cast<ButtonEvent>(GetField<uint16_t>(26, 1)); }
  const flatbuffers::String *button_id() const { return GetPointer<const flatbuffers::String *>(28); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* ID */) &&
           VerifyField<float>(verifier, 6 /* size */) &&
           VerifyField<fpl::pie_noon::Vec4>(verifier, 8 /* margin */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* texture_foreground */) &&
           verifier.Verify(texture_foreground()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* texture_background */) &&
           verifier.Verify(texture_background()) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 14 /* foreground_position */) &&
           VerifyField<float>(verifier, 16 /* foreground_size_pressed */) &&
           VerifyField<float>(verifier, 18 /* foreground_size_focus */) &&
           VerifyField<float>(verifier, 20 /* foreground_size */) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 22 /* draw_scale_normal */) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 24 /* draw_scale_pressed */) &&
           VerifyField<uint16_t>(verifier, 26 /* event_trigger */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 28 /* button_id */) &&
           verifier.Verify(button_id()) &&
           verifier.EndTable();
  }
};

struct ImguiButtonDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ID(ButtonId ID) { fbb_.AddElement<uint16_t>(4, static_cast<uint16_t>(ID), 0); }
  void add_size(float size) { fbb_.AddElement<float>(6, size, 0); }
  void add_margin(const fpl::pie_noon::Vec4 *margin) { fbb_.AddStruct(8, margin); }
  void add_texture_foreground(flatbuffers::Offset<flatbuffers::String> texture_foreground) { fbb_.AddOffset(10, texture_foreground); }
  void add_texture_background(flatbuffers::Offset<flatbuffers::String> texture_background) { fbb_.AddOffset(12, texture_background); }
  void add_foreground_position(const fpl::pie_noon::Vec2 *foreground_position) { fbb_.AddStruct(14, foreground_position); }
  void add_foreground_size_pressed(float foreground_size_pressed) { fbb_.AddElement<float>(16, foreground_size_pressed, 0); }
  void add_foreground_size_focus(float foreground_size_focus) { fbb_.AddElement<float>(18, foreground_size_focus, 1.0); }
  void add_foreground_size(float foreground_size) { fbb_.AddElement<float>(20, foreground_size, 0); }
  void add_draw_scale_normal(const fpl::pie_noon::Vec2 *draw_scale_normal) { fbb_.AddStruct(22, draw_scale_normal); }
  void add_draw_scale_pressed(const fpl::pie_noon::Vec2 *draw_scale_pressed) { fbb_.AddStruct(24, draw_scale_pressed); }
  void add_event_trigger(ButtonEvent event_trigger) { fbb_.AddElement<uint16_t>(26, static_cast<uint16_t>(event_trigger), 1); }
  void add_button_id(flatbuffers::Offset<flatbuffers::String> button_id) { fbb_.AddOffset(28, button_id); }
  ImguiButtonDefBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ImguiButtonDefBuilder &operator=(const ImguiButtonDefBuilder &);
  flatbuffers::Offset<ImguiButtonDef> Finish() {
    auto o = flatbuffers::Offset<ImguiButtonDef>(fbb_.EndTable(start_, 13));
    return o;
  }
};

inline flatbuffers::Offset<ImguiButtonDef> CreateImguiButtonDef(flatbuffers::FlatBufferBuilder &_fbb,
   ButtonId ID = ButtonId_Undefined,
   float size = 0,
   const fpl::pie_noon::Vec4 *margin = 0,
   flatbuffers::Offset<flatbuffers::String> texture_foreground = 0,
   flatbuffers::Offset<flatbuffers::String> texture_background = 0,
   const fpl::pie_noon::Vec2 *foreground_position = 0,
   float foreground_size_pressed = 0,
   float foreground_size_focus = 1.0,
   float foreground_size = 0,
   const fpl::pie_noon::Vec2 *draw_scale_normal = 0,
   const fpl::pie_noon::Vec2 *draw_scale_pressed = 0,
   ButtonEvent event_trigger = ButtonEvent_ButtonPress,
   flatbuffers::Offset<flatbuffers::String> button_id = 0) {
  ImguiButtonDefBuilder builder_(_fbb);
  builder_.add_button_id(button_id);
  builder_.add_draw_scale_pressed(draw_scale_pressed);
  builder_.add_draw_scale_normal(draw_scale_normal);
  builder_.add_foreground_size(foreground_size);
  builder_.add_foreground_size_focus(foreground_size_focus);
  builder_.add_foreground_size_pressed(foreground_size_pressed);
  builder_.add_foreground_position(foreground_position);
  builder_.add_texture_background(texture_background);
  builder_.add_texture_foreground(texture_foreground);
  builder_.add_margin(margin);
  builder_.add_size(size);
  builder_.add_event_trigger(event_trigger);
  builder_.add_ID(ID);
  return builder_.Finish();
}

struct StartGroupDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  ButtonId ID() const { return static_cast<ButtonId>(GetField<uint16_t>(4, 0)); }
  GroupLayout layout() const { return static_cast<GroupLayout>(GetField<uint16_t>(6, 1)); }
  float size() const { return GetField<float>(8, 0); }
  const fpl::pie_noon::Vec4 *margin() const { return GetStruct<const fpl::pie_noon::Vec4 *>(10); }
  const flatbuffers::String *texture_background() const { return GetPointer<const flatbuffers::String *>(12); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* ID */) &&
           VerifyField<uint16_t>(verifier, 6 /* layout */) &&
           VerifyField<float>(verifier, 8 /* size */) &&
           VerifyField<fpl::pie_noon::Vec4>(verifier, 10 /* margin */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* texture_background */) &&
           verifier.Verify(texture_background()) &&
           verifier.EndTable();
  }
};

struct StartGroupDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ID(ButtonId ID) { fbb_.AddElement<uint16_t>(4, static_cast<uint16_t>(ID), 0); }
  void add_layout(GroupLayout layout) { fbb_.AddElement<uint16_t>(6, static_cast<uint16_t>(layout), 1); }
  void add_size(float size) { fbb_.AddElement<float>(8, size, 0); }
  void add_margin(const fpl::pie_noon::Vec4 *margin) { fbb_.AddStruct(10, margin); }
  void add_texture_background(flatbuffers::Offset<flatbuffers::String> texture_background) { fbb_.AddOffset(12, texture_background); }
  StartGroupDefBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  StartGroupDefBuilder &operator=(const StartGroupDefBuilder &);
  flatbuffers::Offset<StartGroupDef> Finish() {
    auto o = flatbuffers::Offset<StartGroupDef>(fbb_.EndTable(start_, 5));
    return o;
  }
};

inline flatbuffers::Offset<StartGroupDef> CreateStartGroupDef(flatbuffers::FlatBufferBuilder &_fbb,
   ButtonId ID = ButtonId_Undefined,
   GroupLayout layout = GroupLayout_GroupLayoutHorizontalCenter,
   float size = 0,
   const fpl::pie_noon::Vec4 *margin = 0,
   flatbuffers::Offset<flatbuffers::String> texture_background = 0) {
  StartGroupDefBuilder builder_(_fbb);
  builder_.add_texture_background(texture_background);
  builder_.add_margin(margin);
  builder_.add_size(size);
  builder_.add_layout(layout);
  builder_.add_ID(ID);
  return builder_.Finish();
}

struct EndGroupDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  ButtonId ID() const { return static_cast<ButtonId>(GetField<uint16_t>(4, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* ID */) &&
           verifier.EndTable();
  }
};

struct EndGroupDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_ID(ButtonId ID) { fbb_.AddElement<uint16_t>(4, static_cast<uint16_t>(ID), 0); }
  EndGroupDefBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  EndGroupDefBuilder &operator=(const EndGroupDefBuilder &);
  flatbuffers::Offset<EndGroupDef> Finish() {
    auto o = flatbuffers::Offset<EndGroupDef>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<EndGroupDef> CreateEndGroupDef(flatbuffers::FlatBufferBuilder &_fbb,
   ButtonId ID = ButtonId_Undefined) {
  EndGroupDefBuilder builder_(_fbb);
  builder_.add_ID(ID);
  return builder_.Finish();
}

struct ImguiWidget FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  ImguiWidgetUnion data_type() const { return static_cast<ImguiWidgetUnion>(GetField<uint8_t>(4, 0)); }
  const void *data() const { return GetPointer<const void *>(6); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* data_type */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* data */) &&
           VerifyImguiWidgetUnion(verifier, data(), data_type()) &&
           verifier.EndTable();
  }
};

struct ImguiWidgetBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data_type(ImguiWidgetUnion data_type) { fbb_.AddElement<uint8_t>(4, static_cast<uint8_t>(data_type), 0); }
  void add_data(flatbuffers::Offset<void> data) { fbb_.AddOffset(6, data); }
  ImguiWidgetBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ImguiWidgetBuilder &operator=(const ImguiWidgetBuilder &);
  flatbuffers::Offset<ImguiWidget> Finish() {
    auto o = flatbuffers::Offset<ImguiWidget>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<ImguiWidget> CreateImguiWidget(flatbuffers::FlatBufferBuilder &_fbb,
   ImguiWidgetUnion data_type = ImguiWidgetUnion_NONE,
   flatbuffers::Offset<void> data = 0) {
  ImguiWidgetBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_data_type(data_type);
  return builder_.Finish();
}

struct UiGroup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint8_t allow_controller_navigation() const { return GetField<uint8_t>(4, 0); }
  ButtonId starting_selection() const { return static_cast<ButtonId>(GetField<uint16_t>(6, 0)); }
  const flatbuffers::Vector<flatbuffers::Offset<ButtonDef>> *button_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ButtonDef>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<StaticImageDef>> *static_image_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<StaticImageDef>> *>(10); }
  int32_t cannonical_window_height() const { return GetField<int32_t>(12, 0); }
  const flatbuffers::String *default_shader() const { return GetPointer<const flatbuffers::String *>(14); }
  const flatbuffers::String *default_inactive_shader() const { return GetPointer<const flatbuffers::String *>(16); }
  const flatbuffers::Vector<flatbuffers::Offset<ImguiWidget>> *imgui_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ImguiWidget>> *>(18); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, 4 /* allow_controller_navigation */) &&
           VerifyField<uint16_t>(verifier, 6 /* starting_selection */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* button_list */) &&
           verifier.Verify(button_list()) &&
           verifier.VerifyVectorOfTables(button_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* static_image_list */) &&
           verifier.Verify(static_image_list()) &&
           verifier.VerifyVectorOfTables(static_image_list()) &&
           VerifyField<int32_t>(verifier, 12 /* cannonical_window_height */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 14 /* default_shader */) &&
           verifier.Verify(default_shader()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* default_inactive_shader */) &&
           verifier.Verify(default_inactive_shader()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 18 /* imgui_list */) &&
           verifier.Verify(imgui_list()) &&
           verifier.VerifyVectorOfTables(imgui_list()) &&
           verifier.EndTable();
  }
};

struct UiGroupBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_allow_controller_navigation(uint8_t allow_controller_navigation) { fbb_.AddElement<uint8_t>(4, allow_controller_navigation, 0); }
  void add_starting_selection(ButtonId starting_selection) { fbb_.AddElement<uint16_t>(6, static_cast<uint16_t>(starting_selection), 0); }
  void add_button_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ButtonDef>>> button_list) { fbb_.AddOffset(8, button_list); }
  void add_static_image_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<StaticImageDef>>> static_image_list) { fbb_.AddOffset(10, static_image_list); }
  void add_cannonical_window_height(int32_t cannonical_window_height) { fbb_.AddElement<int32_t>(12, cannonical_window_height, 0); }
  void add_default_shader(flatbuffers::Offset<flatbuffers::String> default_shader) { fbb_.AddOffset(14, default_shader); }
  void add_default_inactive_shader(flatbuffers::Offset<flatbuffers::String> default_inactive_shader) { fbb_.AddOffset(16, default_inactive_shader); }
  void add_imgui_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ImguiWidget>>> imgui_list) { fbb_.AddOffset(18, imgui_list); }
  UiGroupBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  UiGroupBuilder &operator=(const UiGroupBuilder &);
  flatbuffers::Offset<UiGroup> Finish() {
    auto o = flatbuffers::Offset<UiGroup>(fbb_.EndTable(start_, 8));
    return o;
  }
};

inline flatbuffers::Offset<UiGroup> CreateUiGroup(flatbuffers::FlatBufferBuilder &_fbb,
   uint8_t allow_controller_navigation = 0,
   ButtonId starting_selection = ButtonId_Undefined,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ButtonDef>>> button_list = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<StaticImageDef>>> static_image_list = 0,
   int32_t cannonical_window_height = 0,
   flatbuffers::Offset<flatbuffers::String> default_shader = 0,
   flatbuffers::Offset<flatbuffers::String> default_inactive_shader = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ImguiWidget>>> imgui_list = 0) {
  UiGroupBuilder builder_(_fbb);
  builder_.add_imgui_list(imgui_list);
  builder_.add_default_inactive_shader(default_inactive_shader);
  builder_.add_default_shader(default_shader);
  builder_.add_cannonical_window_height(cannonical_window_height);
  builder_.add_static_image_list(static_image_list);
  builder_.add_button_list(button_list);
  builder_.add_starting_selection(starting_selection);
  builder_.add_allow_controller_navigation(allow_controller_navigation);
  return builder_.Finish();
}

struct FixedAccessory FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fpl::pie_noon::Vec2i *location() const { return GetStruct<const fpl::pie_noon::Vec2i *>(4); }
  const fpl::pie_noon::Vec2 *scale() const { return GetStruct<const fpl::pie_noon::Vec2 *>(6); }
  fpl::pie_noon::RenderableId renderable() const { return static_cast<fpl::pie_noon::RenderableId>(GetField<uint16_t>(8, 0)); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<fpl::pie_noon::Vec2i>(verifier, 4 /* location */) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 6 /* scale */) &&
           VerifyField<uint16_t>(verifier, 8 /* renderable */) &&
           verifier.EndTable();
  }
};

struct FixedAccessoryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_location(const fpl::pie_noon::Vec2i *location) { fbb_.AddStruct(4, location); }
  void add_scale(const fpl::pie_noon::Vec2 *scale) { fbb_.AddStruct(6, scale); }
  void add_renderable(fpl::pie_noon::RenderableId renderable) { fbb_.AddElement<uint16_t>(8, static_cast<uint16_t>(renderable), 0); }
  FixedAccessoryBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  FixedAccessoryBuilder &operator=(const FixedAccessoryBuilder &);
  flatbuffers::Offset<FixedAccessory> Finish() {
    auto o = flatbuffers::Offset<FixedAccessory>(fbb_.EndTable(start_, 3));
    return o;
  }
};

inline flatbuffers::Offset<FixedAccessory> CreateFixedAccessory(flatbuffers::FlatBufferBuilder &_fbb,
   const fpl::pie_noon::Vec2i *location = 0,
   const fpl::pie_noon::Vec2 *scale = 0,
   fpl::pie_noon::RenderableId renderable = fpl::pie_noon::RenderableId_Invalid) {
  FixedAccessoryBuilder builder_(_fbb);
  builder_.add_scale(scale);
  builder_.add_location(location);
  builder_.add_renderable(renderable);
  return builder_.Finish();
}

struct AccessoryGroup FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<int8_t> *indices() const { return GetPointer<const flatbuffers::Vector<int8_t> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* indices */) &&
           verifier.Verify(indices()) &&
           verifier.EndTable();
  }
};

struct AccessoryGroupBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_indices(flatbuffers::Offset<flatbuffers::Vector<int8_t>> indices) { fbb_.AddOffset(4, indices); }
  AccessoryGroupBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AccessoryGroupBuilder &operator=(const AccessoryGroupBuilder &);
  flatbuffers::Offset<AccessoryGroup> Finish() {
    auto o = flatbuffers::Offset<AccessoryGroup>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<AccessoryGroup> CreateAccessoryGroup(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<int8_t>> indices = 0) {
  AccessoryGroupBuilder builder_(_fbb);
  builder_.add_indices(indices);
  return builder_.Finish();
}

struct CharacterData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fpl::pie_noon::Vec3 *position() const { return GetStruct<const fpl::pie_noon::Vec3 *>(4); }
  int32_t left_jump() const { return GetField<int32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 4 /* position */) &&
           VerifyField<int32_t>(verifier, 6 /* left_jump */) &&
           verifier.EndTable();
  }
};

struct CharacterDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(const fpl::pie_noon::Vec3 *position) { fbb_.AddStruct(4, position); }
  void add_left_jump(int32_t left_jump) { fbb_.AddElement<int32_t>(6, left_jump, 0); }
  CharacterDataBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CharacterDataBuilder &operator=(const CharacterDataBuilder &);
  flatbuffers::Offset<CharacterData> Finish() {
    auto o = flatbuffers::Offset<CharacterData>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<CharacterData> CreateCharacterData(flatbuffers::FlatBufferBuilder &_fbb,
   const fpl::pie_noon::Vec3 *position = 0,
   int32_t left_jump = 0) {
  CharacterDataBuilder builder_(_fbb);
  builder_.add_left_jump(left_jump);
  builder_.add_position(position);
  return builder_.Finish();
}

struct CardboardFigure FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  fpl::pie_noon::RenderableId id() const { return static_cast<fpl::pie_noon::RenderableId>(GetField<uint16_t>(4, 0)); }
  const flatbuffers::String *cardboard_front() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *cardboard_back() const { return GetPointer<const flatbuffers::String *>(8); }
  const fpl::pie_noon::Vec3 *offset() const { return GetStruct<const fpl::pie_noon::Vec3 *>(10); }
  const fpl::pie_noon::Vec2i *pixel_bounds() const { return GetStruct<const fpl::pie_noon::Vec2i *>(12); }
  float geometry_scale() const { return GetField<float>(14, 1.0); }
  uint8_t stick() const { return GetField<uint8_t>(16, 0); }
  uint8_t shadow() const { return GetField<uint8_t>(18, 0); }
  uint8_t cardboard() const { return GetField<uint8_t>(20, 0); }
  const fpl::pie_noon::Vec2i *splatter_offset() const { return GetStruct<const fpl::pie_noon::Vec2i *>(22); }
  const fpl::pie_noon::Vec2i *health_offset() const { return GetStruct<const fpl::pie_noon::Vec2i *>(24); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint16_t>(verifier, 4 /* id */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* cardboard_front */) &&
           verifier.Verify(cardboard_front()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* cardboard_back */) &&
           verifier.Verify(cardboard_back()) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 10 /* offset */) &&
           VerifyField<fpl::pie_noon::Vec2i>(verifier, 12 /* pixel_bounds */) &&
           VerifyField<float>(verifier, 14 /* geometry_scale */) &&
           VerifyField<uint8_t>(verifier, 16 /* stick */) &&
           VerifyField<uint8_t>(verifier, 18 /* shadow */) &&
           VerifyField<uint8_t>(verifier, 20 /* cardboard */) &&
           VerifyField<fpl::pie_noon::Vec2i>(verifier, 22 /* splatter_offset */) &&
           VerifyField<fpl::pie_noon::Vec2i>(verifier, 24 /* health_offset */) &&
           verifier.EndTable();
  }
};

struct CardboardFigureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(fpl::pie_noon::RenderableId id) { fbb_.AddElement<uint16_t>(4, static_cast<uint16_t>(id), 0); }
  void add_cardboard_front(flatbuffers::Offset<flatbuffers::String> cardboard_front) { fbb_.AddOffset(6, cardboard_front); }
  void add_cardboard_back(flatbuffers::Offset<flatbuffers::String> cardboard_back) { fbb_.AddOffset(8, cardboard_back); }
  void add_offset(const fpl::pie_noon::Vec3 *offset) { fbb_.AddStruct(10, offset); }
  void add_pixel_bounds(const fpl::pie_noon::Vec2i *pixel_bounds) { fbb_.AddStruct(12, pixel_bounds); }
  void add_geometry_scale(float geometry_scale) { fbb_.AddElement<float>(14, geometry_scale, 1.0); }
  void add_stick(uint8_t stick) { fbb_.AddElement<uint8_t>(16, stick, 0); }
  void add_shadow(uint8_t shadow) { fbb_.AddElement<uint8_t>(18, shadow, 0); }
  void add_cardboard(uint8_t cardboard) { fbb_.AddElement<uint8_t>(20, cardboard, 0); }
  void add_splatter_offset(const fpl::pie_noon::Vec2i *splatter_offset) { fbb_.AddStruct(22, splatter_offset); }
  void add_health_offset(const fpl::pie_noon::Vec2i *health_offset) { fbb_.AddStruct(24, health_offset); }
  CardboardFigureBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CardboardFigureBuilder &operator=(const CardboardFigureBuilder &);
  flatbuffers::Offset<CardboardFigure> Finish() {
    auto o = flatbuffers::Offset<CardboardFigure>(fbb_.EndTable(start_, 11));
    return o;
  }
};

inline flatbuffers::Offset<CardboardFigure> CreateCardboardFigure(flatbuffers::FlatBufferBuilder &_fbb,
   fpl::pie_noon::RenderableId id = fpl::pie_noon::RenderableId_Invalid,
   flatbuffers::Offset<flatbuffers::String> cardboard_front = 0,
   flatbuffers::Offset<flatbuffers::String> cardboard_back = 0,
   const fpl::pie_noon::Vec3 *offset = 0,
   const fpl::pie_noon::Vec2i *pixel_bounds = 0,
   float geometry_scale = 1.0,
   uint8_t stick = 0,
   uint8_t shadow = 0,
   uint8_t cardboard = 0,
   const fpl::pie_noon::Vec2i *splatter_offset = 0,
   const fpl::pie_noon::Vec2i *health_offset = 0) {
  CardboardFigureBuilder builder_(_fbb);
  builder_.add_health_offset(health_offset);
  builder_.add_splatter_offset(splatter_offset);
  builder_.add_geometry_scale(geometry_scale);
  builder_.add_pixel_bounds(pixel_bounds);
  builder_.add_offset(offset);
  builder_.add_cardboard_back(cardboard_back);
  builder_.add_cardboard_front(cardboard_front);
  builder_.add_id(id);
  builder_.add_cardboard(cardboard);
  builder_.add_shadow(shadow);
  builder_.add_stick(stick);
  return builder_.Finish();
}

struct CharacterArrangement FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<CharacterData>> *character_data() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CharacterData>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* character_data */) &&
           verifier.Verify(character_data()) &&
           verifier.VerifyVectorOfTables(character_data()) &&
           verifier.EndTable();
  }
};

struct CharacterArrangementBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_character_data(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CharacterData>>> character_data) { fbb_.AddOffset(4, character_data); }
  CharacterArrangementBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CharacterArrangementBuilder &operator=(const CharacterArrangementBuilder &);
  flatbuffers::Offset<CharacterArrangement> Finish() {
    auto o = flatbuffers::Offset<CharacterArrangement>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<CharacterArrangement> CreateCharacterArrangement(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CharacterData>>> character_data = 0) {
  CharacterArrangementBuilder builder_(_fbb);
  builder_.add_character_data(character_data);
  return builder_.Finish();
}

struct CameraMovementToSubject FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const fpl::pie_noon::Vec3 *position_from_subject() const { return GetStruct<const fpl::pie_noon::Vec3 *>(4); }
  const fpl::pie_noon::Vec3 *position_from_base() const { return GetStruct<const fpl::pie_noon::Vec3 *>(6); }
  const fpl::pie_noon::Vec3 *target_from_subject() const { return GetStruct<const fpl::pie_noon::Vec3 *>(8); }
  const fpl::pie_noon::Vec3 *target_from_base() const { return GetStruct<const fpl::pie_noon::Vec3 *>(10); }
  float start_velocity() const { return GetField<float>(12, 0); }
  int32_t time() const { return GetField<int32_t>(14, 0); }
  const motive::SmoothParameters *def() const { return GetPointer<const motive::SmoothParameters *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 4 /* position_from_subject */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 6 /* position_from_base */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 8 /* target_from_subject */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 10 /* target_from_base */) &&
           VerifyField<float>(verifier, 12 /* start_velocity */) &&
           VerifyField<int32_t>(verifier, 14 /* time */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* def */) &&
           verifier.VerifyTable(def()) &&
           verifier.EndTable();
  }
};

struct CameraMovementToSubjectBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position_from_subject(const fpl::pie_noon::Vec3 *position_from_subject) { fbb_.AddStruct(4, position_from_subject); }
  void add_position_from_base(const fpl::pie_noon::Vec3 *position_from_base) { fbb_.AddStruct(6, position_from_base); }
  void add_target_from_subject(const fpl::pie_noon::Vec3 *target_from_subject) { fbb_.AddStruct(8, target_from_subject); }
  void add_target_from_base(const fpl::pie_noon::Vec3 *target_from_base) { fbb_.AddStruct(10, target_from_base); }
  void add_start_velocity(float start_velocity) { fbb_.AddElement<float>(12, start_velocity, 0); }
  void add_time(int32_t time) { fbb_.AddElement<int32_t>(14, time, 0); }
  void add_def(flatbuffers::Offset<motive::SmoothParameters> def) { fbb_.AddOffset(16, def); }
  CameraMovementToSubjectBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  CameraMovementToSubjectBuilder &operator=(const CameraMovementToSubjectBuilder &);
  flatbuffers::Offset<CameraMovementToSubject> Finish() {
    auto o = flatbuffers::Offset<CameraMovementToSubject>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<CameraMovementToSubject> CreateCameraMovementToSubject(flatbuffers::FlatBufferBuilder &_fbb,
   const fpl::pie_noon::Vec3 *position_from_subject = 0,
   const fpl::pie_noon::Vec3 *position_from_base = 0,
   const fpl::pie_noon::Vec3 *target_from_subject = 0,
   const fpl::pie_noon::Vec3 *target_from_base = 0,
   float start_velocity = 0,
   int32_t time = 0,
   flatbuffers::Offset<motive::SmoothParameters> def = 0) {
  CameraMovementToSubjectBuilder builder_(_fbb);
  builder_.add_def(def);
  builder_.add_time(time);
  builder_.add_start_velocity(start_velocity);
  builder_.add_target_from_base(target_from_base);
  builder_.add_target_from_subject(target_from_subject);
  builder_.add_position_from_base(position_from_base);
  builder_.add_position_from_subject(position_from_subject);
  return builder_.Finish();
}

struct TurnLengthSpec FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  int32_t turn_seconds() const { return GetField<int32_t>(4, 0); }
  int32_t until_turn_number() const { return GetField<int32_t>(6, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, 4 /* turn_seconds */) &&
           VerifyField<int32_t>(verifier, 6 /* until_turn_number */) &&
           verifier.EndTable();
  }
};

struct TurnLengthSpecBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_turn_seconds(int32_t turn_seconds) { fbb_.AddElement<int32_t>(4, turn_seconds, 0); }
  void add_until_turn_number(int32_t until_turn_number) { fbb_.AddElement<int32_t>(6, until_turn_number, 0); }
  TurnLengthSpecBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  TurnLengthSpecBuilder &operator=(const TurnLengthSpecBuilder &);
  flatbuffers::Offset<TurnLengthSpec> Finish() {
    auto o = flatbuffers::Offset<TurnLengthSpec>(fbb_.EndTable(start_, 2));
    return o;
  }
};

inline flatbuffers::Offset<TurnLengthSpec> CreateTurnLengthSpec(flatbuffers::FlatBufferBuilder &_fbb,
   int32_t turn_seconds = 0,
   int32_t until_turn_number = 0) {
  TurnLengthSpecBuilder builder_(_fbb);
  builder_.add_until_turn_number(until_turn_number);
  builder_.add_turn_seconds(turn_seconds);
  return builder_.Finish();
}

struct MultiscreenOptions FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<TurnLengthSpec>> *turn_length() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TurnLengthSpec>> *>(4); }
  int32_t network_grace_milliseconds() const { return GetField<int32_t>(6, 0); }
  int32_t first_turn_delay_milliseconds() const { return GetField<int32_t>(8, 0); }
  int32_t start_turn_delay_milliseconds() const { return GetField<int32_t>(10, 0); }
  int32_t pie_delay_milliseconds() const { return GetField<int32_t>(12, 0); }
  int32_t block_delay_milliseconds() const { return GetField<int32_t>(14, 0); }
  int32_t block_hold_milliseconds() const { return GetField<int32_t>(16, 0); }
  int32_t char_delay_milliseconds() const { return GetField<int32_t>(18, 0); }
  int32_t grow_delay_milliseconds() const { return GetField<int32_t>(20, 0); }
  uint8_t auto_connect_on_host() const { return GetField<uint8_t>(22, 0); }
  uint8_t auto_connect_on_client() const { return GetField<uint8_t>(24, 0); }
  uint8_t use_full_name_as_instance_name() const { return GetField<uint8_t>(26, 0); }
  const flatbuffers::String *nearby_connections_service_id() const { return GetPointer<const flatbuffers::String *>(28); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *nearby_connections_app_identifiers() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(30); }
  uint16_t max_players() const { return GetField<uint16_t>(32, 0); }
  uint8_t ai_enabled() const { return GetField<uint8_t>(34, 0); }
  float ai_chance_to_throw() const { return GetField<float>(36, 0); }
  float ai_chance_to_block() const { return GetField<float>(38, 0); }
  float ai_chance_to_wait() const { return GetField<float>(40, 0); }
  float ai_chance_to_target_largest_pie() const { return GetField<float>(42, 0); }
  float ai_chance_to_target_lowest_health() const { return GetField<float>(44, 0); }
  float ai_chance_to_target_highest_health() const { return GetField<float>(46, 0); }
  float ai_chance_to_target_random() const { return GetField<float>(48, 0); }
  float light_splat_damage_threshold() const { return GetField<float>(50, 0); }
  int32_t light_splat_num_buttons() const { return GetField<int32_t>(52, 0); }
  float heavy_splat_damage_threshold() const { return GetField<float>(54, 0); }
  int32_t heavy_splat_num_buttons() const { return GetField<int32_t>(56, 0); }
  float splat_start_scale() const { return GetField<float>(58, 0); }
  float splat_scale_speed() const { return GetField<float>(60, 0); }
  float splat_drip_speed() const { return GetField<float>(62, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* turn_length */) &&
           verifier.Verify(turn_length()) &&
           verifier.VerifyVectorOfTables(turn_length()) &&
           VerifyField<int32_t>(verifier, 6 /* network_grace_milliseconds */) &&
           VerifyField<int32_t>(verifier, 8 /* first_turn_delay_milliseconds */) &&
           VerifyField<int32_t>(verifier, 10 /* start_turn_delay_milliseconds */) &&
           VerifyField<int32_t>(verifier, 12 /* pie_delay_milliseconds */) &&
           VerifyField<int32_t>(verifier, 14 /* block_delay_milliseconds */) &&
           VerifyField<int32_t>(verifier, 16 /* block_hold_milliseconds */) &&
           VerifyField<int32_t>(verifier, 18 /* char_delay_milliseconds */) &&
           VerifyField<int32_t>(verifier, 20 /* grow_delay_milliseconds */) &&
           VerifyField<uint8_t>(verifier, 22 /* auto_connect_on_host */) &&
           VerifyField<uint8_t>(verifier, 24 /* auto_connect_on_client */) &&
           VerifyField<uint8_t>(verifier, 26 /* use_full_name_as_instance_name */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 28 /* nearby_connections_service_id */) &&
           verifier.Verify(nearby_connections_service_id()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 30 /* nearby_connections_app_identifiers */) &&
           verifier.Verify(nearby_connections_app_identifiers()) &&
           verifier.VerifyVectorOfStrings(nearby_connections_app_identifiers()) &&
           VerifyField<uint16_t>(verifier, 32 /* max_players */) &&
           VerifyField<uint8_t>(verifier, 34 /* ai_enabled */) &&
           VerifyField<float>(verifier, 36 /* ai_chance_to_throw */) &&
           VerifyField<float>(verifier, 38 /* ai_chance_to_block */) &&
           VerifyField<float>(verifier, 40 /* ai_chance_to_wait */) &&
           VerifyField<float>(verifier, 42 /* ai_chance_to_target_largest_pie */) &&
           VerifyField<float>(verifier, 44 /* ai_chance_to_target_lowest_health */) &&
           VerifyField<float>(verifier, 46 /* ai_chance_to_target_highest_health */) &&
           VerifyField<float>(verifier, 48 /* ai_chance_to_target_random */) &&
           VerifyField<float>(verifier, 50 /* light_splat_damage_threshold */) &&
           VerifyField<int32_t>(verifier, 52 /* light_splat_num_buttons */) &&
           VerifyField<float>(verifier, 54 /* heavy_splat_damage_threshold */) &&
           VerifyField<int32_t>(verifier, 56 /* heavy_splat_num_buttons */) &&
           VerifyField<float>(verifier, 58 /* splat_start_scale */) &&
           VerifyField<float>(verifier, 60 /* splat_scale_speed */) &&
           VerifyField<float>(verifier, 62 /* splat_drip_speed */) &&
           verifier.EndTable();
  }
};

struct MultiscreenOptionsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_turn_length(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TurnLengthSpec>>> turn_length) { fbb_.AddOffset(4, turn_length); }
  void add_network_grace_milliseconds(int32_t network_grace_milliseconds) { fbb_.AddElement<int32_t>(6, network_grace_milliseconds, 0); }
  void add_first_turn_delay_milliseconds(int32_t first_turn_delay_milliseconds) { fbb_.AddElement<int32_t>(8, first_turn_delay_milliseconds, 0); }
  void add_start_turn_delay_milliseconds(int32_t start_turn_delay_milliseconds) { fbb_.AddElement<int32_t>(10, start_turn_delay_milliseconds, 0); }
  void add_pie_delay_milliseconds(int32_t pie_delay_milliseconds) { fbb_.AddElement<int32_t>(12, pie_delay_milliseconds, 0); }
  void add_block_delay_milliseconds(int32_t block_delay_milliseconds) { fbb_.AddElement<int32_t>(14, block_delay_milliseconds, 0); }
  void add_block_hold_milliseconds(int32_t block_hold_milliseconds) { fbb_.AddElement<int32_t>(16, block_hold_milliseconds, 0); }
  void add_char_delay_milliseconds(int32_t char_delay_milliseconds) { fbb_.AddElement<int32_t>(18, char_delay_milliseconds, 0); }
  void add_grow_delay_milliseconds(int32_t grow_delay_milliseconds) { fbb_.AddElement<int32_t>(20, grow_delay_milliseconds, 0); }
  void add_auto_connect_on_host(uint8_t auto_connect_on_host) { fbb_.AddElement<uint8_t>(22, auto_connect_on_host, 0); }
  void add_auto_connect_on_client(uint8_t auto_connect_on_client) { fbb_.AddElement<uint8_t>(24, auto_connect_on_client, 0); }
  void add_use_full_name_as_instance_name(uint8_t use_full_name_as_instance_name) { fbb_.AddElement<uint8_t>(26, use_full_name_as_instance_name, 0); }
  void add_nearby_connections_service_id(flatbuffers::Offset<flatbuffers::String> nearby_connections_service_id) { fbb_.AddOffset(28, nearby_connections_service_id); }
  void add_nearby_connections_app_identifiers(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> nearby_connections_app_identifiers) { fbb_.AddOffset(30, nearby_connections_app_identifiers); }
  void add_max_players(uint16_t max_players) { fbb_.AddElement<uint16_t>(32, max_players, 0); }
  void add_ai_enabled(uint8_t ai_enabled) { fbb_.AddElement<uint8_t>(34, ai_enabled, 0); }
  void add_ai_chance_to_throw(float ai_chance_to_throw) { fbb_.AddElement<float>(36, ai_chance_to_throw, 0); }
  void add_ai_chance_to_block(float ai_chance_to_block) { fbb_.AddElement<float>(38, ai_chance_to_block, 0); }
  void add_ai_chance_to_wait(float ai_chance_to_wait) { fbb_.AddElement<float>(40, ai_chance_to_wait, 0); }
  void add_ai_chance_to_target_largest_pie(float ai_chance_to_target_largest_pie) { fbb_.AddElement<float>(42, ai_chance_to_target_largest_pie, 0); }
  void add_ai_chance_to_target_lowest_health(float ai_chance_to_target_lowest_health) { fbb_.AddElement<float>(44, ai_chance_to_target_lowest_health, 0); }
  void add_ai_chance_to_target_highest_health(float ai_chance_to_target_highest_health) { fbb_.AddElement<float>(46, ai_chance_to_target_highest_health, 0); }
  void add_ai_chance_to_target_random(float ai_chance_to_target_random) { fbb_.AddElement<float>(48, ai_chance_to_target_random, 0); }
  void add_light_splat_damage_threshold(float light_splat_damage_threshold) { fbb_.AddElement<float>(50, light_splat_damage_threshold, 0); }
  void add_light_splat_num_buttons(int32_t light_splat_num_buttons) { fbb_.AddElement<int32_t>(52, light_splat_num_buttons, 0); }
  void add_heavy_splat_damage_threshold(float heavy_splat_damage_threshold) { fbb_.AddElement<float>(54, heavy_splat_damage_threshold, 0); }
  void add_heavy_splat_num_buttons(int32_t heavy_splat_num_buttons) { fbb_.AddElement<int32_t>(56, heavy_splat_num_buttons, 0); }
  void add_splat_start_scale(float splat_start_scale) { fbb_.AddElement<float>(58, splat_start_scale, 0); }
  void add_splat_scale_speed(float splat_scale_speed) { fbb_.AddElement<float>(60, splat_scale_speed, 0); }
  void add_splat_drip_speed(float splat_drip_speed) { fbb_.AddElement<float>(62, splat_drip_speed, 0); }
  MultiscreenOptionsBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  MultiscreenOptionsBuilder &operator=(const MultiscreenOptionsBuilder &);
  flatbuffers::Offset<MultiscreenOptions> Finish() {
    auto o = flatbuffers::Offset<MultiscreenOptions>(fbb_.EndTable(start_, 30));
    return o;
  }
};

inline flatbuffers::Offset<MultiscreenOptions> CreateMultiscreenOptions(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TurnLengthSpec>>> turn_length = 0,
   int32_t network_grace_milliseconds = 0,
   int32_t first_turn_delay_milliseconds = 0,
   int32_t start_turn_delay_milliseconds = 0,
   int32_t pie_delay_milliseconds = 0,
   int32_t block_delay_milliseconds = 0,
   int32_t block_hold_milliseconds = 0,
   int32_t char_delay_milliseconds = 0,
   int32_t grow_delay_milliseconds = 0,
   uint8_t auto_connect_on_host = 0,
   uint8_t auto_connect_on_client = 0,
   uint8_t use_full_name_as_instance_name = 0,
   flatbuffers::Offset<flatbuffers::String> nearby_connections_service_id = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> nearby_connections_app_identifiers = 0,
   uint16_t max_players = 0,
   uint8_t ai_enabled = 0,
   float ai_chance_to_throw = 0,
   float ai_chance_to_block = 0,
   float ai_chance_to_wait = 0,
   float ai_chance_to_target_largest_pie = 0,
   float ai_chance_to_target_lowest_health = 0,
   float ai_chance_to_target_highest_health = 0,
   float ai_chance_to_target_random = 0,
   float light_splat_damage_threshold = 0,
   int32_t light_splat_num_buttons = 0,
   float heavy_splat_damage_threshold = 0,
   int32_t heavy_splat_num_buttons = 0,
   float splat_start_scale = 0,
   float splat_scale_speed = 0,
   float splat_drip_speed = 0) {
  MultiscreenOptionsBuilder builder_(_fbb);
  builder_.add_splat_drip_speed(splat_drip_speed);
  builder_.add_splat_scale_speed(splat_scale_speed);
  builder_.add_splat_start_scale(splat_start_scale);
  builder_.add_heavy_splat_num_buttons(heavy_splat_num_buttons);
  builder_.add_heavy_splat_damage_threshold(heavy_splat_damage_threshold);
  builder_.add_light_splat_num_buttons(light_splat_num_buttons);
  builder_.add_light_splat_damage_threshold(light_splat_damage_threshold);
  builder_.add_ai_chance_to_target_random(ai_chance_to_target_random);
  builder_.add_ai_chance_to_target_highest_health(ai_chance_to_target_highest_health);
  builder_.add_ai_chance_to_target_lowest_health(ai_chance_to_target_lowest_health);
  builder_.add_ai_chance_to_target_largest_pie(ai_chance_to_target_largest_pie);
  builder_.add_ai_chance_to_wait(ai_chance_to_wait);
  builder_.add_ai_chance_to_block(ai_chance_to_block);
  builder_.add_ai_chance_to_throw(ai_chance_to_throw);
  builder_.add_nearby_connections_app_identifiers(nearby_connections_app_identifiers);
  builder_.add_nearby_connections_service_id(nearby_connections_service_id);
  builder_.add_grow_delay_milliseconds(grow_delay_milliseconds);
  builder_.add_char_delay_milliseconds(char_delay_milliseconds);
  builder_.add_block_hold_milliseconds(block_hold_milliseconds);
  builder_.add_block_delay_milliseconds(block_delay_milliseconds);
  builder_.add_pie_delay_milliseconds(pie_delay_milliseconds);
  builder_.add_start_turn_delay_milliseconds(start_turn_delay_milliseconds);
  builder_.add_first_turn_delay_milliseconds(first_turn_delay_milliseconds);
  builder_.add_network_grace_milliseconds(network_grace_milliseconds);
  builder_.add_turn_length(turn_length);
  builder_.add_max_players(max_players);
  builder_.add_ai_enabled(ai_enabled);
  builder_.add_use_full_name_as_instance_name(use_full_name_as_instance_name);
  builder_.add_auto_connect_on_client(auto_connect_on_client);
  builder_.add_auto_connect_on_host(auto_connect_on_host);
  return builder_.Finish();
}

struct Config FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<fpl::pie_noon::EntityDefinition>> *entity_list() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<fpl::pie_noon::EntityDefinition>> *>(4); }
  const fpl::pie_noon::EntityDefinition *character_scene_object() const { return GetPointer<const fpl::pie_noon::EntityDefinition *>(6); }
  float ground_plane_width() const { return GetField<float>(8, 0); }
  float ground_plane_depth() const { return GetField<float>(10, 0); }
  const fpl::pie_noon::EntityDefinition *splatter_def() const { return GetPointer<const fpl::pie_noon::EntityDefinition *>(12); }
  const fpl::pie_noon::Vec3 *splatter_range_min() const { return GetStruct<const fpl::pie_noon::Vec3 *>(14); }
  const fpl::pie_noon::Vec3 *splatter_range_max() const { return GetStruct<const fpl::pie_noon::Vec3 *>(16); }
  float splatter_scale_min() const { return GetField<float>(18, 0); }
  float splatter_scale_max() const { return GetField<float>(20, 0); }
  float splatter_radius_squared() const { return GetField<float>(22, 0); }
  uint32_t character_count() const { return GetField<uint32_t>(24, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<CharacterArrangement>> *character_arrangements() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CharacterArrangement>> *>(26); }
  uint32_t number_of_keyboard_controllers() const { return GetField<uint32_t>(28, 0); }
  const flatbuffers::Vector<const fpl::pie_noon::Vec3 *> *character_colors() const { return GetPointer<const flatbuffers::Vector<const fpl::pie_noon::Vec3 *> *>(30); }
  const fpl::pie_noon::Vec3 *ai_color() const { return GetStruct<const fpl::pie_noon::Vec3 *>(32); }
  float character_global_brightness_factor() const { return GetField<float>(34, 0); }
  float character_global_brightness_factor_buttons() const { return GetField<float>(36, 0); }
  const fpl::pie_noon::ScoringRules *scoring_rules() const { return GetPointer<const fpl::pie_noon::ScoringRules *>(38); }
  const pindrop::AudioConfig *audio() const { return GetPointer<const pindrop::AudioConfig *>(40); }
  const fpl::pie_noon::Vec3 *camera_position() const { return GetStruct<const fpl::pie_noon::Vec3 *>(42); }
  const fpl::pie_noon::Vec3 *camera_target() const { return GetStruct<const fpl::pie_noon::Vec3 *>(44); }
  const flatbuffers::Vector<const fpl::pie_noon::Vec3 *> *light_positions() const { return GetPointer<const flatbuffers::Vector<const fpl::pie_noon::Vec3 *> *>(46); }
  GameMode game_mode() const { return static_cast<GameMode>(GetField<uint16_t>(48, 0)); }
  int32_t character_health() const { return GetField<int32_t>(50, 0); }
  int32_t game_time() const { return GetField<int32_t>(52, 0); }
  int32_t target_score() const { return GetField<int32_t>(54, 0); }
  int32_t pie_flight_time() const { return GetField<int32_t>(56, 0); }
  float pie_arc_height() const { return GetField<float>(58, 0); }
  float pie_arc_height_variance() const { return GetField<float>(60, 0); }
  float pie_initial_height() const { return GetField<float>(62, 0); }
  int32_t pie_rotations() const { return GetField<int32_t>(64, 0); }
  int32_t pie_rotation_variance() const { return GetField<int32_t>(66, 0); }
  float pie_initial_angle() const { return GetField<float>(68, 0); }
  float pie_target_angle() const { return GetField<float>(70, 0); }
  PieDeflectionMode pie_deflection_mode() const { return static_cast<PieDeflectionMode>(GetField<uint16_t>(72, 0)); }
  int32_t pie_damage_change_when_deflected() const { return GetField<int32_t>(74, 0); }
  int32_t min_update_time() const { return GetField<int32_t>(76, 0); }
  int32_t max_update_time() const { return GetField<int32_t>(78, 0); }
  const motive::OvershootParameters *face_angle_def() const { return GetPointer<const motive::OvershootParameters *>(80); }
  const motive::Settled1fParameters *face_angle_twitch() const { return GetPointer<const motive::Settled1fParameters *>(82); }
  float face_angle_twitch_velocity() const { return GetField<float>(84, 0); }
  float tilt_away_angle() const { return GetField<float>(86, 0); }
  const motive::OvershootParameters *join_motivator_def() const { return GetPointer<const motive::OvershootParameters *>(88); }
  float join_motivator_start_value() const { return GetField<float>(90, 0); }
  float join_motivator_target_value() const { return GetField<float>(92, 0); }
  float join_motivator_start_velocity() const { return GetField<float>(94, 0); }
  uint16_t join_number_of_pies() const { return GetField<uint16_t>(96, 0); }
  const flatbuffers::Vector<uint16_t> *renderable_id_for_pie_damage() const { return GetPointer<const flatbuffers::Vector<uint16_t> *>(98); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *hit_sound_id_for_pie_damage() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(100); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *blocked_sound_id_for_pie_damage() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(102); }
  const flatbuffers::Vector<flatbuffers::Offset<motive::OvershootParameters>> *motivator_specifications() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<motive::OvershootParameters>> *>(104); }
  float prop_shake_velocity() const { return GetField<float>(106, 0); }
  float prop_shake_percent_per_damage() const { return GetField<float>(108, 0); }
  float prop_shake_identity_distance_sq() const { return GetField<float>(110, 0); }
  int32_t camera_move_on_damage_min_damage() const { return GetField<int32_t>(112, 0); }
  const CameraMovementToSubject *camera_move_on_damage() const { return GetPointer<const CameraMovementToSubject *>(114); }
  const CameraMovementToSubject *camera_move_to_base() const { return GetPointer<const CameraMovementToSubject *>(116); }
  int32_t play_finished_timeout() const { return GetField<int32_t>(118, 0); }
  const fpl::pie_noon::Vec2i *window_size() const { return GetStruct<const fpl::pie_noon::Vec2i *>(120); }
  const flatbuffers::String *window_title() const { return GetPointer<const flatbuffers::String *>(122); }
  float viewport_angle() const { return GetField<float>(124, 0); }
  float viewport_near_plane() const { return GetField<float>(126, 0); }
  float viewport_far_plane() const { return GetField<float>(128, 0); }
  float pixel_to_world_scale() const { return GetField<float>(130, 0); }
  float cardboard_front_z_offset() const { return GetField<float>(132, 0); }
  float cardboard_back_z_offset() const { return GetField<float>(134, 0); }
  float accessory_z_offset() const { return GetField<float>(136, 0); }
  float accessory_z_increment() const { return GetField<float>(138, 0); }
  float cardboard_bias_towards_stage_front() const { return GetField<float>(140, 0); }
  const fpl::pie_noon::Vec3 *cardboard_ambient_material() const { return GetStruct<const fpl::pie_noon::Vec3 *>(142); }
  const fpl::pie_noon::Vec3 *cardboard_diffuse_material() const { return GetStruct<const fpl::pie_noon::Vec3 *>(144); }
  const fpl::pie_noon::Vec3 *cardboard_specular_material() const { return GetStruct<const fpl::pie_noon::Vec3 *>(146); }
  float cardboard_shininess() const { return GetField<float>(148, 0); }
  float cardboard_normalmap_scale() const { return GetField<float>(150, 0); }
  float stick_y_offset() const { return GetField<float>(152, 0); }
  float stick_front_z_offset() const { return GetField<float>(154, 0); }
  float stick_back_z_offset() const { return GetField<float>(156, 0); }
  const flatbuffers::String *stick_front() const { return GetPointer<const flatbuffers::String *>(158); }
  const flatbuffers::String *stick_back() const { return GetPointer<const flatbuffers::String *>(160); }
  const fpl::pie_noon::Vec2 *stick_bounds() const { return GetStruct<const fpl::pie_noon::Vec2 *>(162); }
  const flatbuffers::String *loading_material() const { return GetPointer<const flatbuffers::String *>(164); }
  const flatbuffers::String *loading_logo() const { return GetPointer<const flatbuffers::String *>(166); }
  int32_t min_loading_time() const { return GetField<int32_t>(168, 0); }
  const flatbuffers::String *fade_material() const { return GetPointer<const flatbuffers::String *>(170); }
  int32_t full_screen_fade_time() const { return GetField<int32_t>(172, 0); }
  const fpl::pie_noon::Vec3 *ui_arrow_offset() const { return GetStruct<const fpl::pie_noon::Vec3 *>(174); }
  const fpl::pie_noon::Vec3 *ui_arrow_scale() const { return GetStruct<const fpl::pie_noon::Vec3 *>(176); }
  const flatbuffers::Vector<flatbuffers::Offset<AccessoryGroup>> *splatter_map() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AccessoryGroup>> *>(178); }
  const flatbuffers::Vector<flatbuffers::Offset<FixedAccessory>> *splatter_accessories() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FixedAccessory>> *>(180); }
  const flatbuffers::Vector<flatbuffers::Offset<AccessoryGroup>> *health_map() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<AccessoryGroup>> *>(182); }
  const flatbuffers::Vector<flatbuffers::Offset<FixedAccessory>> *health_accessories() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<FixedAccessory>> *>(184); }
  const flatbuffers::Vector<flatbuffers::Offset<CardboardFigure>> *renderables() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<CardboardFigure>> *>(186); }
  const fpl::ParticleDef *pie_splatter_def() const { return GetPointer<const fpl::ParticleDef *>(188); }
  int32_t pie_noon_particles_per_damage() const { return GetField<int32_t>(190, 0); }
  const fpl::ParticleDef *confetti_def() const { return GetPointer<const fpl::ParticleDef *>(192); }
  int32_t joining_confetti_count() const { return GetField<int32_t>(194, 0); }
  const fpl::ParticleDef *joining_confetti_def() const { return GetPointer<const fpl::ParticleDef *>(196); }
  const flatbuffers::String *cardboard_center_material() const { return GetPointer<const flatbuffers::String *>(198); }
  const fpl::pie_noon::Vec2 *cardboard_center_scale() const { return GetStruct<const fpl::pie_noon::Vec2 *>(200); }
  const fpl::pie_noon::Vec4 *cardboard_center_color() const { return GetStruct<const fpl::pie_noon::Vec4 *>(202); }
  float target_reticle_distance() const { return GetField<float>(204, 0); }
  float target_reticle_height() const { return GetField<float>(206, 0); }
  const fpl::pie_noon::Vec3 *cardboard_pie_offset() const { return GetStruct<const fpl::pie_noon::Vec3 *>(208); }
  const fpl::pie_noon::Vec3 *cardboard_pie_scale() const { return GetStruct<const fpl::pie_noon::Vec3 *>(210); }
  const fpl::pie_noon::Vec3 *cardboard_health_offset() const { return GetStruct<const fpl::pie_noon::Vec3 *>(212); }
  float cardboard_arrow_scale() const { return GetField<float>(214, 0); }
  int32_t ai_minimum_time_between_actions() const { return GetField<int32_t>(216, 0); }
  int32_t ai_maximum_time_between_actions() const { return GetField<int32_t>(218, 0); }
  float ai_chance_to_block() const { return GetField<float>(220, 0); }
  float ai_chance_to_change_aim() const { return GetField<float>(222, 0); }
  float ai_chance_to_throw() const { return GetField<float>(224, 0); }
  int32_t ai_block_min_duration() const { return GetField<int32_t>(226, 0); }
  int32_t ai_block_max_duration() const { return GetField<int32_t>(228, 0); }
  const UiGroup *touchscreen_zones() const { return GetPointer<const UiGroup *>(230); }
  const UiGroup *pause_screen_buttons() const { return GetPointer<const UiGroup *>(232); }
  const UiGroup *title_screen_buttons_android() const { return GetPointer<const UiGroup *>(234); }
  const UiGroup *title_screen_buttons_non_android() const { return GetPointer<const UiGroup *>(236); }
  const UiGroup *extras_screen_buttons() const { return GetPointer<const UiGroup *>(238); }
  const UiGroup *join_screen_buttons() const { return GetPointer<const UiGroup *>(240); }
  const UiGroup *msx_screen_buttons() const { return GetPointer<const UiGroup *>(242); }
  const UiGroup *msx_pleasewait_screen_buttons() const { return GetPointer<const UiGroup *>(244); }
  const UiGroup *msx_waitingforplayers_screen_buttons() const { return GetPointer<const UiGroup *>(246); }
  const UiGroup *msx_waitingforplayers1_screen_buttons() const { return GetPointer<const UiGroup *>(248); }
  const UiGroup *msx_waitingforplayers2_screen_buttons() const { return GetPointer<const UiGroup *>(250); }
  const UiGroup *msx_waitingforplayers3_screen_buttons() const { return GetPointer<const UiGroup *>(252); }
  const UiGroup *msx_waitingforplayers4_screen_buttons() const { return GetPointer<const UiGroup *>(254); }
  const UiGroup *msx_searching_screen_buttons() const { return GetPointer<const UiGroup *>(256); }
  const UiGroup *msx_connecting_screen_buttons() const { return GetPointer<const UiGroup *>(258); }
  const UiGroup *msx_waitingforgame_screen_buttons() const { return GetPointer<const UiGroup *>(260); }
  const UiGroup *msx_cant_host_game_screen_buttons() const { return GetPointer<const UiGroup *>(262); }
  const UiGroup *msx_all_players_disconnected_screen_buttons() const { return GetPointer<const UiGroup *>(264); }
  const UiGroup *msx_host_disconnected_screen_buttons() const { return GetPointer<const UiGroup *>(266); }
  const UiGroup *msx_connection_lost_screen_buttons() const { return GetPointer<const UiGroup *>(268); }
  const UiGroup *multiplayer_host() const { return GetPointer<const UiGroup *>(270); }
  const UiGroup *multiplayer_client() const { return GetPointer<const UiGroup *>(272); }
  const UiGroup *cardboard_screen_buttons() const { return GetPointer<const UiGroup *>(274); }
  const UiGroup *game_modes_screen_buttons() const { return GetPointer<const UiGroup *>(276); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *tutorial_slides() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(278); }
  float tutorial_aspect_ratio() const { return GetField<float>(280, 0); }
  int32_t tutorial_num_future_slides_to_load() const { return GetField<int32_t>(282, 0); }
  int32_t tutorial_fade_time() const { return GetField<int32_t>(284, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *multiscreen_tutorial_slides() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(286); }
  float multiscreen_tutorial_aspect_ratio() const { return GetField<float>(288, 0); }
  uint8_t draw_characters() const { return GetField<uint8_t>(290, 0); }
  uint8_t draw_ui_arrows() const { return GetField<uint8_t>(292, 0); }
  uint8_t draw_pies() const { return GetField<uint8_t>(294, 0); }
  uint8_t draw_props() const { return GetField<uint8_t>(296, 0); }
  uint8_t draw_axes() const { return GetField<uint8_t>(298, 0); }
  uint8_t draw_character_lineup() const { return GetField<uint8_t>(300, 0); }
  uint8_t draw_lineup_accessories() const { return GetField<uint8_t>(302, 0); }
  fpl::pie_noon::RenderableId draw_fixed_renderable() const { return static_cast<fpl::pie_noon::RenderableId>(GetField<uint16_t>(304, 0)); }
  const fpl::pie_noon::Vec3 *button_to_camera_translation_scale() const { return GetStruct<const fpl::pie_noon::Vec3 *>(306); }
  float mouse_to_camera_rotation_scale() const { return GetField<float>(308, 0); }
  uint8_t allow_camera_movement() const { return GetField<uint8_t>(310, 0); }
  uint8_t print_character_states() const { return GetField<uint8_t>(312, 0); }
  uint8_t print_pie_states() const { return GetField<uint8_t>(314, 0); }
  uint8_t print_camera_orientation() const { return GetField<uint8_t>(316, 0); }
  const MultiscreenOptions *multiscreen_options() const { return GetPointer<const MultiscreenOptions *>(318); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* entity_list */) &&
           verifier.Verify(entity_list()) &&
           verifier.VerifyVectorOfTables(entity_list()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* character_scene_object */) &&
           verifier.VerifyTable(character_scene_object()) &&
           VerifyField<float>(verifier, 8 /* ground_plane_width */) &&
           VerifyField<float>(verifier, 10 /* ground_plane_depth */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 12 /* splatter_def */) &&
           verifier.VerifyTable(splatter_def()) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 14 /* splatter_range_min */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 16 /* splatter_range_max */) &&
           VerifyField<float>(verifier, 18 /* splatter_scale_min */) &&
           VerifyField<float>(verifier, 20 /* splatter_scale_max */) &&
           VerifyField<float>(verifier, 22 /* splatter_radius_squared */) &&
           VerifyField<uint32_t>(verifier, 24 /* character_count */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 26 /* character_arrangements */) &&
           verifier.Verify(character_arrangements()) &&
           verifier.VerifyVectorOfTables(character_arrangements()) &&
           VerifyField<uint32_t>(verifier, 28 /* number_of_keyboard_controllers */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 30 /* character_colors */) &&
           verifier.Verify(character_colors()) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 32 /* ai_color */) &&
           VerifyField<float>(verifier, 34 /* character_global_brightness_factor */) &&
           VerifyField<float>(verifier, 36 /* character_global_brightness_factor_buttons */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 38 /* scoring_rules */) &&
           verifier.VerifyTable(scoring_rules()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 40 /* audio */) &&
           verifier.VerifyTable(audio()) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 42 /* camera_position */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 44 /* camera_target */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 46 /* light_positions */) &&
           verifier.Verify(light_positions()) &&
           VerifyField<uint16_t>(verifier, 48 /* game_mode */) &&
           VerifyField<int32_t>(verifier, 50 /* character_health */) &&
           VerifyField<int32_t>(verifier, 52 /* game_time */) &&
           VerifyField<int32_t>(verifier, 54 /* target_score */) &&
           VerifyField<int32_t>(verifier, 56 /* pie_flight_time */) &&
           VerifyField<float>(verifier, 58 /* pie_arc_height */) &&
           VerifyField<float>(verifier, 60 /* pie_arc_height_variance */) &&
           VerifyField<float>(verifier, 62 /* pie_initial_height */) &&
           VerifyField<int32_t>(verifier, 64 /* pie_rotations */) &&
           VerifyField<int32_t>(verifier, 66 /* pie_rotation_variance */) &&
           VerifyField<float>(verifier, 68 /* pie_initial_angle */) &&
           VerifyField<float>(verifier, 70 /* pie_target_angle */) &&
           VerifyField<uint16_t>(verifier, 72 /* pie_deflection_mode */) &&
           VerifyField<int32_t>(verifier, 74 /* pie_damage_change_when_deflected */) &&
           VerifyField<int32_t>(verifier, 76 /* min_update_time */) &&
           VerifyField<int32_t>(verifier, 78 /* max_update_time */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 80 /* face_angle_def */) &&
           verifier.VerifyTable(face_angle_def()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 82 /* face_angle_twitch */) &&
           verifier.VerifyTable(face_angle_twitch()) &&
           VerifyField<float>(verifier, 84 /* face_angle_twitch_velocity */) &&
           VerifyField<float>(verifier, 86 /* tilt_away_angle */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 88 /* join_motivator_def */) &&
           verifier.VerifyTable(join_motivator_def()) &&
           VerifyField<float>(verifier, 90 /* join_motivator_start_value */) &&
           VerifyField<float>(verifier, 92 /* join_motivator_target_value */) &&
           VerifyField<float>(verifier, 94 /* join_motivator_start_velocity */) &&
           VerifyField<uint16_t>(verifier, 96 /* join_number_of_pies */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 98 /* renderable_id_for_pie_damage */) &&
           verifier.Verify(renderable_id_for_pie_damage()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 100 /* hit_sound_id_for_pie_damage */) &&
           verifier.Verify(hit_sound_id_for_pie_damage()) &&
           verifier.VerifyVectorOfStrings(hit_sound_id_for_pie_damage()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 102 /* blocked_sound_id_for_pie_damage */) &&
           verifier.Verify(blocked_sound_id_for_pie_damage()) &&
           verifier.VerifyVectorOfStrings(blocked_sound_id_for_pie_damage()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 104 /* motivator_specifications */) &&
           verifier.Verify(motivator_specifications()) &&
           verifier.VerifyVectorOfTables(motivator_specifications()) &&
           VerifyField<float>(verifier, 106 /* prop_shake_velocity */) &&
           VerifyField<float>(verifier, 108 /* prop_shake_percent_per_damage */) &&
           VerifyField<float>(verifier, 110 /* prop_shake_identity_distance_sq */) &&
           VerifyField<int32_t>(verifier, 112 /* camera_move_on_damage_min_damage */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 114 /* camera_move_on_damage */) &&
           verifier.VerifyTable(camera_move_on_damage()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 116 /* camera_move_to_base */) &&
           verifier.VerifyTable(camera_move_to_base()) &&
           VerifyField<int32_t>(verifier, 118 /* play_finished_timeout */) &&
           VerifyField<fpl::pie_noon::Vec2i>(verifier, 120 /* window_size */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 122 /* window_title */) &&
           verifier.Verify(window_title()) &&
           VerifyField<float>(verifier, 124 /* viewport_angle */) &&
           VerifyField<float>(verifier, 126 /* viewport_near_plane */) &&
           VerifyField<float>(verifier, 128 /* viewport_far_plane */) &&
           VerifyField<float>(verifier, 130 /* pixel_to_world_scale */) &&
           VerifyField<float>(verifier, 132 /* cardboard_front_z_offset */) &&
           VerifyField<float>(verifier, 134 /* cardboard_back_z_offset */) &&
           VerifyField<float>(verifier, 136 /* accessory_z_offset */) &&
           VerifyField<float>(verifier, 138 /* accessory_z_increment */) &&
           VerifyField<float>(verifier, 140 /* cardboard_bias_towards_stage_front */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 142 /* cardboard_ambient_material */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 144 /* cardboard_diffuse_material */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 146 /* cardboard_specular_material */) &&
           VerifyField<float>(verifier, 148 /* cardboard_shininess */) &&
           VerifyField<float>(verifier, 150 /* cardboard_normalmap_scale */) &&
           VerifyField<float>(verifier, 152 /* stick_y_offset */) &&
           VerifyField<float>(verifier, 154 /* stick_front_z_offset */) &&
           VerifyField<float>(verifier, 156 /* stick_back_z_offset */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 158 /* stick_front */) &&
           verifier.Verify(stick_front()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 160 /* stick_back */) &&
           verifier.Verify(stick_back()) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 162 /* stick_bounds */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 164 /* loading_material */) &&
           verifier.Verify(loading_material()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 166 /* loading_logo */) &&
           verifier.Verify(loading_logo()) &&
           VerifyField<int32_t>(verifier, 168 /* min_loading_time */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 170 /* fade_material */) &&
           verifier.Verify(fade_material()) &&
           VerifyField<int32_t>(verifier, 172 /* full_screen_fade_time */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 174 /* ui_arrow_offset */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 176 /* ui_arrow_scale */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 178 /* splatter_map */) &&
           verifier.Verify(splatter_map()) &&
           verifier.VerifyVectorOfTables(splatter_map()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 180 /* splatter_accessories */) &&
           verifier.Verify(splatter_accessories()) &&
           verifier.VerifyVectorOfTables(splatter_accessories()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 182 /* health_map */) &&
           verifier.Verify(health_map()) &&
           verifier.VerifyVectorOfTables(health_map()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 184 /* health_accessories */) &&
           verifier.Verify(health_accessories()) &&
           verifier.VerifyVectorOfTables(health_accessories()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 186 /* renderables */) &&
           verifier.Verify(renderables()) &&
           verifier.VerifyVectorOfTables(renderables()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 188 /* pie_splatter_def */) &&
           verifier.VerifyTable(pie_splatter_def()) &&
           VerifyField<int32_t>(verifier, 190 /* pie_noon_particles_per_damage */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 192 /* confetti_def */) &&
           verifier.VerifyTable(confetti_def()) &&
           VerifyField<int32_t>(verifier, 194 /* joining_confetti_count */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 196 /* joining_confetti_def */) &&
           verifier.VerifyTable(joining_confetti_def()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 198 /* cardboard_center_material */) &&
           verifier.Verify(cardboard_center_material()) &&
           VerifyField<fpl::pie_noon::Vec2>(verifier, 200 /* cardboard_center_scale */) &&
           VerifyField<fpl::pie_noon::Vec4>(verifier, 202 /* cardboard_center_color */) &&
           VerifyField<float>(verifier, 204 /* target_reticle_distance */) &&
           VerifyField<float>(verifier, 206 /* target_reticle_height */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 208 /* cardboard_pie_offset */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 210 /* cardboard_pie_scale */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 212 /* cardboard_health_offset */) &&
           VerifyField<float>(verifier, 214 /* cardboard_arrow_scale */) &&
           VerifyField<int32_t>(verifier, 216 /* ai_minimum_time_between_actions */) &&
           VerifyField<int32_t>(verifier, 218 /* ai_maximum_time_between_actions */) &&
           VerifyField<float>(verifier, 220 /* ai_chance_to_block */) &&
           VerifyField<float>(verifier, 222 /* ai_chance_to_change_aim */) &&
           VerifyField<float>(verifier, 224 /* ai_chance_to_throw */) &&
           VerifyField<int32_t>(verifier, 226 /* ai_block_min_duration */) &&
           VerifyField<int32_t>(verifier, 228 /* ai_block_max_duration */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 230 /* touchscreen_zones */) &&
           verifier.VerifyTable(touchscreen_zones()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 232 /* pause_screen_buttons */) &&
           verifier.VerifyTable(pause_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 234 /* title_screen_buttons_android */) &&
           verifier.VerifyTable(title_screen_buttons_android()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 236 /* title_screen_buttons_non_android */) &&
           verifier.VerifyTable(title_screen_buttons_non_android()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 238 /* extras_screen_buttons */) &&
           verifier.VerifyTable(extras_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 240 /* join_screen_buttons */) &&
           verifier.VerifyTable(join_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 242 /* msx_screen_buttons */) &&
           verifier.VerifyTable(msx_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 244 /* msx_pleasewait_screen_buttons */) &&
           verifier.VerifyTable(msx_pleasewait_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 246 /* msx_waitingforplayers_screen_buttons */) &&
           verifier.VerifyTable(msx_waitingforplayers_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 248 /* msx_waitingforplayers1_screen_buttons */) &&
           verifier.VerifyTable(msx_waitingforplayers1_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 250 /* msx_waitingforplayers2_screen_buttons */) &&
           verifier.VerifyTable(msx_waitingforplayers2_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 252 /* msx_waitingforplayers3_screen_buttons */) &&
           verifier.VerifyTable(msx_waitingforplayers3_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 254 /* msx_waitingforplayers4_screen_buttons */) &&
           verifier.VerifyTable(msx_waitingforplayers4_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 256 /* msx_searching_screen_buttons */) &&
           verifier.VerifyTable(msx_searching_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 258 /* msx_connecting_screen_buttons */) &&
           verifier.VerifyTable(msx_connecting_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 260 /* msx_waitingforgame_screen_buttons */) &&
           verifier.VerifyTable(msx_waitingforgame_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 262 /* msx_cant_host_game_screen_buttons */) &&
           verifier.VerifyTable(msx_cant_host_game_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 264 /* msx_all_players_disconnected_screen_buttons */) &&
           verifier.VerifyTable(msx_all_players_disconnected_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 266 /* msx_host_disconnected_screen_buttons */) &&
           verifier.VerifyTable(msx_host_disconnected_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 268 /* msx_connection_lost_screen_buttons */) &&
           verifier.VerifyTable(msx_connection_lost_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 270 /* multiplayer_host */) &&
           verifier.VerifyTable(multiplayer_host()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 272 /* multiplayer_client */) &&
           verifier.VerifyTable(multiplayer_client()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 274 /* cardboard_screen_buttons */) &&
           verifier.VerifyTable(cardboard_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 276 /* game_modes_screen_buttons */) &&
           verifier.VerifyTable(game_modes_screen_buttons()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 278 /* tutorial_slides */) &&
           verifier.Verify(tutorial_slides()) &&
           verifier.VerifyVectorOfStrings(tutorial_slides()) &&
           VerifyField<float>(verifier, 280 /* tutorial_aspect_ratio */) &&
           VerifyField<int32_t>(verifier, 282 /* tutorial_num_future_slides_to_load */) &&
           VerifyField<int32_t>(verifier, 284 /* tutorial_fade_time */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 286 /* multiscreen_tutorial_slides */) &&
           verifier.Verify(multiscreen_tutorial_slides()) &&
           verifier.VerifyVectorOfStrings(multiscreen_tutorial_slides()) &&
           VerifyField<float>(verifier, 288 /* multiscreen_tutorial_aspect_ratio */) &&
           VerifyField<uint8_t>(verifier, 290 /* draw_characters */) &&
           VerifyField<uint8_t>(verifier, 292 /* draw_ui_arrows */) &&
           VerifyField<uint8_t>(verifier, 294 /* draw_pies */) &&
           VerifyField<uint8_t>(verifier, 296 /* draw_props */) &&
           VerifyField<uint8_t>(verifier, 298 /* draw_axes */) &&
           VerifyField<uint8_t>(verifier, 300 /* draw_character_lineup */) &&
           VerifyField<uint8_t>(verifier, 302 /* draw_lineup_accessories */) &&
           VerifyField<uint16_t>(verifier, 304 /* draw_fixed_renderable */) &&
           VerifyField<fpl::pie_noon::Vec3>(verifier, 306 /* button_to_camera_translation_scale */) &&
           VerifyField<float>(verifier, 308 /* mouse_to_camera_rotation_scale */) &&
           VerifyField<uint8_t>(verifier, 310 /* allow_camera_movement */) &&
           VerifyField<uint8_t>(verifier, 312 /* print_character_states */) &&
           VerifyField<uint8_t>(verifier, 314 /* print_pie_states */) &&
           VerifyField<uint8_t>(verifier, 316 /* print_camera_orientation */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 318 /* multiscreen_options */) &&
           verifier.VerifyTable(multiscreen_options()) &&
           verifier.EndTable();
  }
};

struct ConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_entity_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fpl::pie_noon::EntityDefinition>>> entity_list) { fbb_.AddOffset(4, entity_list); }
  void add_character_scene_object(flatbuffers::Offset<fpl::pie_noon::EntityDefinition> character_scene_object) { fbb_.AddOffset(6, character_scene_object); }
  void add_ground_plane_width(float ground_plane_width) { fbb_.AddElement<float>(8, ground_plane_width, 0); }
  void add_ground_plane_depth(float ground_plane_depth) { fbb_.AddElement<float>(10, ground_plane_depth, 0); }
  void add_splatter_def(flatbuffers::Offset<fpl::pie_noon::EntityDefinition> splatter_def) { fbb_.AddOffset(12, splatter_def); }
  void add_splatter_range_min(const fpl::pie_noon::Vec3 *splatter_range_min) { fbb_.AddStruct(14, splatter_range_min); }
  void add_splatter_range_max(const fpl::pie_noon::Vec3 *splatter_range_max) { fbb_.AddStruct(16, splatter_range_max); }
  void add_splatter_scale_min(float splatter_scale_min) { fbb_.AddElement<float>(18, splatter_scale_min, 0); }
  void add_splatter_scale_max(float splatter_scale_max) { fbb_.AddElement<float>(20, splatter_scale_max, 0); }
  void add_splatter_radius_squared(float splatter_radius_squared) { fbb_.AddElement<float>(22, splatter_radius_squared, 0); }
  void add_character_count(uint32_t character_count) { fbb_.AddElement<uint32_t>(24, character_count, 0); }
  void add_character_arrangements(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CharacterArrangement>>> character_arrangements) { fbb_.AddOffset(26, character_arrangements); }
  void add_number_of_keyboard_controllers(uint32_t number_of_keyboard_controllers) { fbb_.AddElement<uint32_t>(28, number_of_keyboard_controllers, 0); }
  void add_character_colors(flatbuffers::Offset<flatbuffers::Vector<const fpl::pie_noon::Vec3 *>> character_colors) { fbb_.AddOffset(30, character_colors); }
  void add_ai_color(const fpl::pie_noon::Vec3 *ai_color) { fbb_.AddStruct(32, ai_color); }
  void add_character_global_brightness_factor(float character_global_brightness_factor) { fbb_.AddElement<float>(34, character_global_brightness_factor, 0); }
  void add_character_global_brightness_factor_buttons(float character_global_brightness_factor_buttons) { fbb_.AddElement<float>(36, character_global_brightness_factor_buttons, 0); }
  void add_scoring_rules(flatbuffers::Offset<fpl::pie_noon::ScoringRules> scoring_rules) { fbb_.AddOffset(38, scoring_rules); }
  void add_audio(flatbuffers::Offset<pindrop::AudioConfig> audio) { fbb_.AddOffset(40, audio); }
  void add_camera_position(const fpl::pie_noon::Vec3 *camera_position) { fbb_.AddStruct(42, camera_position); }
  void add_camera_target(const fpl::pie_noon::Vec3 *camera_target) { fbb_.AddStruct(44, camera_target); }
  void add_light_positions(flatbuffers::Offset<flatbuffers::Vector<const fpl::pie_noon::Vec3 *>> light_positions) { fbb_.AddOffset(46, light_positions); }
  void add_game_mode(GameMode game_mode) { fbb_.AddElement<uint16_t>(48, static_cast<uint16_t>(game_mode), 0); }
  void add_character_health(int32_t character_health) { fbb_.AddElement<int32_t>(50, character_health, 0); }
  void add_game_time(int32_t game_time) { fbb_.AddElement<int32_t>(52, game_time, 0); }
  void add_target_score(int32_t target_score) { fbb_.AddElement<int32_t>(54, target_score, 0); }
  void add_pie_flight_time(int32_t pie_flight_time) { fbb_.AddElement<int32_t>(56, pie_flight_time, 0); }
  void add_pie_arc_height(float pie_arc_height) { fbb_.AddElement<float>(58, pie_arc_height, 0); }
  void add_pie_arc_height_variance(float pie_arc_height_variance) { fbb_.AddElement<float>(60, pie_arc_height_variance, 0); }
  void add_pie_initial_height(float pie_initial_height) { fbb_.AddElement<float>(62, pie_initial_height, 0); }
  void add_pie_rotations(int32_t pie_rotations) { fbb_.AddElement<int32_t>(64, pie_rotations, 0); }
  void add_pie_rotation_variance(int32_t pie_rotation_variance) { fbb_.AddElement<int32_t>(66, pie_rotation_variance, 0); }
  void add_pie_initial_angle(float pie_initial_angle) { fbb_.AddElement<float>(68, pie_initial_angle, 0); }
  void add_pie_target_angle(float pie_target_angle) { fbb_.AddElement<float>(70, pie_target_angle, 0); }
  void add_pie_deflection_mode(PieDeflectionMode pie_deflection_mode) { fbb_.AddElement<uint16_t>(72, static_cast<uint16_t>(pie_deflection_mode), 0); }
  void add_pie_damage_change_when_deflected(int32_t pie_damage_change_when_deflected) { fbb_.AddElement<int32_t>(74, pie_damage_change_when_deflected, 0); }
  void add_min_update_time(int32_t min_update_time) { fbb_.AddElement<int32_t>(76, min_update_time, 0); }
  void add_max_update_time(int32_t max_update_time) { fbb_.AddElement<int32_t>(78, max_update_time, 0); }
  void add_face_angle_def(flatbuffers::Offset<motive::OvershootParameters> face_angle_def) { fbb_.AddOffset(80, face_angle_def); }
  void add_face_angle_twitch(flatbuffers::Offset<motive::Settled1fParameters> face_angle_twitch) { fbb_.AddOffset(82, face_angle_twitch); }
  void add_face_angle_twitch_velocity(float face_angle_twitch_velocity) { fbb_.AddElement<float>(84, face_angle_twitch_velocity, 0); }
  void add_tilt_away_angle(float tilt_away_angle) { fbb_.AddElement<float>(86, tilt_away_angle, 0); }
  void add_join_motivator_def(flatbuffers::Offset<motive::OvershootParameters> join_motivator_def) { fbb_.AddOffset(88, join_motivator_def); }
  void add_join_motivator_start_value(float join_motivator_start_value) { fbb_.AddElement<float>(90, join_motivator_start_value, 0); }
  void add_join_motivator_target_value(float join_motivator_target_value) { fbb_.AddElement<float>(92, join_motivator_target_value, 0); }
  void add_join_motivator_start_velocity(float join_motivator_start_velocity) { fbb_.AddElement<float>(94, join_motivator_start_velocity, 0); }
  void add_join_number_of_pies(uint16_t join_number_of_pies) { fbb_.AddElement<uint16_t>(96, join_number_of_pies, 0); }
  void add_renderable_id_for_pie_damage(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> renderable_id_for_pie_damage) { fbb_.AddOffset(98, renderable_id_for_pie_damage); }
  void add_hit_sound_id_for_pie_damage(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> hit_sound_id_for_pie_damage) { fbb_.AddOffset(100, hit_sound_id_for_pie_damage); }
  void add_blocked_sound_id_for_pie_damage(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> blocked_sound_id_for_pie_damage) { fbb_.AddOffset(102, blocked_sound_id_for_pie_damage); }
  void add_motivator_specifications(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<motive::OvershootParameters>>> motivator_specifications) { fbb_.AddOffset(104, motivator_specifications); }
  void add_prop_shake_velocity(float prop_shake_velocity) { fbb_.AddElement<float>(106, prop_shake_velocity, 0); }
  void add_prop_shake_percent_per_damage(float prop_shake_percent_per_damage) { fbb_.AddElement<float>(108, prop_shake_percent_per_damage, 0); }
  void add_prop_shake_identity_distance_sq(float prop_shake_identity_distance_sq) { fbb_.AddElement<float>(110, prop_shake_identity_distance_sq, 0); }
  void add_camera_move_on_damage_min_damage(int32_t camera_move_on_damage_min_damage) { fbb_.AddElement<int32_t>(112, camera_move_on_damage_min_damage, 0); }
  void add_camera_move_on_damage(flatbuffers::Offset<CameraMovementToSubject> camera_move_on_damage) { fbb_.AddOffset(114, camera_move_on_damage); }
  void add_camera_move_to_base(flatbuffers::Offset<CameraMovementToSubject> camera_move_to_base) { fbb_.AddOffset(116, camera_move_to_base); }
  void add_play_finished_timeout(int32_t play_finished_timeout) { fbb_.AddElement<int32_t>(118, play_finished_timeout, 0); }
  void add_window_size(const fpl::pie_noon::Vec2i *window_size) { fbb_.AddStruct(120, window_size); }
  void add_window_title(flatbuffers::Offset<flatbuffers::String> window_title) { fbb_.AddOffset(122, window_title); }
  void add_viewport_angle(float viewport_angle) { fbb_.AddElement<float>(124, viewport_angle, 0); }
  void add_viewport_near_plane(float viewport_near_plane) { fbb_.AddElement<float>(126, viewport_near_plane, 0); }
  void add_viewport_far_plane(float viewport_far_plane) { fbb_.AddElement<float>(128, viewport_far_plane, 0); }
  void add_pixel_to_world_scale(float pixel_to_world_scale) { fbb_.AddElement<float>(130, pixel_to_world_scale, 0); }
  void add_cardboard_front_z_offset(float cardboard_front_z_offset) { fbb_.AddElement<float>(132, cardboard_front_z_offset, 0); }
  void add_cardboard_back_z_offset(float cardboard_back_z_offset) { fbb_.AddElement<float>(134, cardboard_back_z_offset, 0); }
  void add_accessory_z_offset(float accessory_z_offset) { fbb_.AddElement<float>(136, accessory_z_offset, 0); }
  void add_accessory_z_increment(float accessory_z_increment) { fbb_.AddElement<float>(138, accessory_z_increment, 0); }
  void add_cardboard_bias_towards_stage_front(float cardboard_bias_towards_stage_front) { fbb_.AddElement<float>(140, cardboard_bias_towards_stage_front, 0); }
  void add_cardboard_ambient_material(const fpl::pie_noon::Vec3 *cardboard_ambient_material) { fbb_.AddStruct(142, cardboard_ambient_material); }
  void add_cardboard_diffuse_material(const fpl::pie_noon::Vec3 *cardboard_diffuse_material) { fbb_.AddStruct(144, cardboard_diffuse_material); }
  void add_cardboard_specular_material(const fpl::pie_noon::Vec3 *cardboard_specular_material) { fbb_.AddStruct(146, cardboard_specular_material); }
  void add_cardboard_shininess(float cardboard_shininess) { fbb_.AddElement<float>(148, cardboard_shininess, 0); }
  void add_cardboard_normalmap_scale(float cardboard_normalmap_scale) { fbb_.AddElement<float>(150, cardboard_normalmap_scale, 0); }
  void add_stick_y_offset(float stick_y_offset) { fbb_.AddElement<float>(152, stick_y_offset, 0); }
  void add_stick_front_z_offset(float stick_front_z_offset) { fbb_.AddElement<float>(154, stick_front_z_offset, 0); }
  void add_stick_back_z_offset(float stick_back_z_offset) { fbb_.AddElement<float>(156, stick_back_z_offset, 0); }
  void add_stick_front(flatbuffers::Offset<flatbuffers::String> stick_front) { fbb_.AddOffset(158, stick_front); }
  void add_stick_back(flatbuffers::Offset<flatbuffers::String> stick_back) { fbb_.AddOffset(160, stick_back); }
  void add_stick_bounds(const fpl::pie_noon::Vec2 *stick_bounds) { fbb_.AddStruct(162, stick_bounds); }
  void add_loading_material(flatbuffers::Offset<flatbuffers::String> loading_material) { fbb_.AddOffset(164, loading_material); }
  void add_loading_logo(flatbuffers::Offset<flatbuffers::String> loading_logo) { fbb_.AddOffset(166, loading_logo); }
  void add_min_loading_time(int32_t min_loading_time) { fbb_.AddElement<int32_t>(168, min_loading_time, 0); }
  void add_fade_material(flatbuffers::Offset<flatbuffers::String> fade_material) { fbb_.AddOffset(170, fade_material); }
  void add_full_screen_fade_time(int32_t full_screen_fade_time) { fbb_.AddElement<int32_t>(172, full_screen_fade_time, 0); }
  void add_ui_arrow_offset(const fpl::pie_noon::Vec3 *ui_arrow_offset) { fbb_.AddStruct(174, ui_arrow_offset); }
  void add_ui_arrow_scale(const fpl::pie_noon::Vec3 *ui_arrow_scale) { fbb_.AddStruct(176, ui_arrow_scale); }
  void add_splatter_map(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AccessoryGroup>>> splatter_map) { fbb_.AddOffset(178, splatter_map); }
  void add_splatter_accessories(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FixedAccessory>>> splatter_accessories) { fbb_.AddOffset(180, splatter_accessories); }
  void add_health_map(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AccessoryGroup>>> health_map) { fbb_.AddOffset(182, health_map); }
  void add_health_accessories(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FixedAccessory>>> health_accessories) { fbb_.AddOffset(184, health_accessories); }
  void add_renderables(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CardboardFigure>>> renderables) { fbb_.AddOffset(186, renderables); }
  void add_pie_splatter_def(flatbuffers::Offset<fpl::ParticleDef> pie_splatter_def) { fbb_.AddOffset(188, pie_splatter_def); }
  void add_pie_noon_particles_per_damage(int32_t pie_noon_particles_per_damage) { fbb_.AddElement<int32_t>(190, pie_noon_particles_per_damage, 0); }
  void add_confetti_def(flatbuffers::Offset<fpl::ParticleDef> confetti_def) { fbb_.AddOffset(192, confetti_def); }
  void add_joining_confetti_count(int32_t joining_confetti_count) { fbb_.AddElement<int32_t>(194, joining_confetti_count, 0); }
  void add_joining_confetti_def(flatbuffers::Offset<fpl::ParticleDef> joining_confetti_def) { fbb_.AddOffset(196, joining_confetti_def); }
  void add_cardboard_center_material(flatbuffers::Offset<flatbuffers::String> cardboard_center_material) { fbb_.AddOffset(198, cardboard_center_material); }
  void add_cardboard_center_scale(const fpl::pie_noon::Vec2 *cardboard_center_scale) { fbb_.AddStruct(200, cardboard_center_scale); }
  void add_cardboard_center_color(const fpl::pie_noon::Vec4 *cardboard_center_color) { fbb_.AddStruct(202, cardboard_center_color); }
  void add_target_reticle_distance(float target_reticle_distance) { fbb_.AddElement<float>(204, target_reticle_distance, 0); }
  void add_target_reticle_height(float target_reticle_height) { fbb_.AddElement<float>(206, target_reticle_height, 0); }
  void add_cardboard_pie_offset(const fpl::pie_noon::Vec3 *cardboard_pie_offset) { fbb_.AddStruct(208, cardboard_pie_offset); }
  void add_cardboard_pie_scale(const fpl::pie_noon::Vec3 *cardboard_pie_scale) { fbb_.AddStruct(210, cardboard_pie_scale); }
  void add_cardboard_health_offset(const fpl::pie_noon::Vec3 *cardboard_health_offset) { fbb_.AddStruct(212, cardboard_health_offset); }
  void add_cardboard_arrow_scale(float cardboard_arrow_scale) { fbb_.AddElement<float>(214, cardboard_arrow_scale, 0); }
  void add_ai_minimum_time_between_actions(int32_t ai_minimum_time_between_actions) { fbb_.AddElement<int32_t>(216, ai_minimum_time_between_actions, 0); }
  void add_ai_maximum_time_between_actions(int32_t ai_maximum_time_between_actions) { fbb_.AddElement<int32_t>(218, ai_maximum_time_between_actions, 0); }
  void add_ai_chance_to_block(float ai_chance_to_block) { fbb_.AddElement<float>(220, ai_chance_to_block, 0); }
  void add_ai_chance_to_change_aim(float ai_chance_to_change_aim) { fbb_.AddElement<float>(222, ai_chance_to_change_aim, 0); }
  void add_ai_chance_to_throw(float ai_chance_to_throw) { fbb_.AddElement<float>(224, ai_chance_to_throw, 0); }
  void add_ai_block_min_duration(int32_t ai_block_min_duration) { fbb_.AddElement<int32_t>(226, ai_block_min_duration, 0); }
  void add_ai_block_max_duration(int32_t ai_block_max_duration) { fbb_.AddElement<int32_t>(228, ai_block_max_duration, 0); }
  void add_touchscreen_zones(flatbuffers::Offset<UiGroup> touchscreen_zones) { fbb_.AddOffset(230, touchscreen_zones); }
  void add_pause_screen_buttons(flatbuffers::Offset<UiGroup> pause_screen_buttons) { fbb_.AddOffset(232, pause_screen_buttons); }
  void add_title_screen_buttons_android(flatbuffers::Offset<UiGroup> title_screen_buttons_android) { fbb_.AddOffset(234, title_screen_buttons_android); }
  void add_title_screen_buttons_non_android(flatbuffers::Offset<UiGroup> title_screen_buttons_non_android) { fbb_.AddOffset(236, title_screen_buttons_non_android); }
  void add_extras_screen_buttons(flatbuffers::Offset<UiGroup> extras_screen_buttons) { fbb_.AddOffset(238, extras_screen_buttons); }
  void add_join_screen_buttons(flatbuffers::Offset<UiGroup> join_screen_buttons) { fbb_.AddOffset(240, join_screen_buttons); }
  void add_msx_screen_buttons(flatbuffers::Offset<UiGroup> msx_screen_buttons) { fbb_.AddOffset(242, msx_screen_buttons); }
  void add_msx_pleasewait_screen_buttons(flatbuffers::Offset<UiGroup> msx_pleasewait_screen_buttons) { fbb_.AddOffset(244, msx_pleasewait_screen_buttons); }
  void add_msx_waitingforplayers_screen_buttons(flatbuffers::Offset<UiGroup> msx_waitingforplayers_screen_buttons) { fbb_.AddOffset(246, msx_waitingforplayers_screen_buttons); }
  void add_msx_waitingforplayers1_screen_buttons(flatbuffers::Offset<UiGroup> msx_waitingforplayers1_screen_buttons) { fbb_.AddOffset(248, msx_waitingforplayers1_screen_buttons); }
  void add_msx_waitingforplayers2_screen_buttons(flatbuffers::Offset<UiGroup> msx_waitingforplayers2_screen_buttons) { fbb_.AddOffset(250, msx_waitingforplayers2_screen_buttons); }
  void add_msx_waitingforplayers3_screen_buttons(flatbuffers::Offset<UiGroup> msx_waitingforplayers3_screen_buttons) { fbb_.AddOffset(252, msx_waitingforplayers3_screen_buttons); }
  void add_msx_waitingforplayers4_screen_buttons(flatbuffers::Offset<UiGroup> msx_waitingforplayers4_screen_buttons) { fbb_.AddOffset(254, msx_waitingforplayers4_screen_buttons); }
  void add_msx_searching_screen_buttons(flatbuffers::Offset<UiGroup> msx_searching_screen_buttons) { fbb_.AddOffset(256, msx_searching_screen_buttons); }
  void add_msx_connecting_screen_buttons(flatbuffers::Offset<UiGroup> msx_connecting_screen_buttons) { fbb_.AddOffset(258, msx_connecting_screen_buttons); }
  void add_msx_waitingforgame_screen_buttons(flatbuffers::Offset<UiGroup> msx_waitingforgame_screen_buttons) { fbb_.AddOffset(260, msx_waitingforgame_screen_buttons); }
  void add_msx_cant_host_game_screen_buttons(flatbuffers::Offset<UiGroup> msx_cant_host_game_screen_buttons) { fbb_.AddOffset(262, msx_cant_host_game_screen_buttons); }
  void add_msx_all_players_disconnected_screen_buttons(flatbuffers::Offset<UiGroup> msx_all_players_disconnected_screen_buttons) { fbb_.AddOffset(264, msx_all_players_disconnected_screen_buttons); }
  void add_msx_host_disconnected_screen_buttons(flatbuffers::Offset<UiGroup> msx_host_disconnected_screen_buttons) { fbb_.AddOffset(266, msx_host_disconnected_screen_buttons); }
  void add_msx_connection_lost_screen_buttons(flatbuffers::Offset<UiGroup> msx_connection_lost_screen_buttons) { fbb_.AddOffset(268, msx_connection_lost_screen_buttons); }
  void add_multiplayer_host(flatbuffers::Offset<UiGroup> multiplayer_host) { fbb_.AddOffset(270, multiplayer_host); }
  void add_multiplayer_client(flatbuffers::Offset<UiGroup> multiplayer_client) { fbb_.AddOffset(272, multiplayer_client); }
  void add_cardboard_screen_buttons(flatbuffers::Offset<UiGroup> cardboard_screen_buttons) { fbb_.AddOffset(274, cardboard_screen_buttons); }
  void add_game_modes_screen_buttons(flatbuffers::Offset<UiGroup> game_modes_screen_buttons) { fbb_.AddOffset(276, game_modes_screen_buttons); }
  void add_tutorial_slides(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tutorial_slides) { fbb_.AddOffset(278, tutorial_slides); }
  void add_tutorial_aspect_ratio(float tutorial_aspect_ratio) { fbb_.AddElement<float>(280, tutorial_aspect_ratio, 0); }
  void add_tutorial_num_future_slides_to_load(int32_t tutorial_num_future_slides_to_load) { fbb_.AddElement<int32_t>(282, tutorial_num_future_slides_to_load, 0); }
  void add_tutorial_fade_time(int32_t tutorial_fade_time) { fbb_.AddElement<int32_t>(284, tutorial_fade_time, 0); }
  void add_multiscreen_tutorial_slides(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> multiscreen_tutorial_slides) { fbb_.AddOffset(286, multiscreen_tutorial_slides); }
  void add_multiscreen_tutorial_aspect_ratio(float multiscreen_tutorial_aspect_ratio) { fbb_.AddElement<float>(288, multiscreen_tutorial_aspect_ratio, 0); }
  void add_draw_characters(uint8_t draw_characters) { fbb_.AddElement<uint8_t>(290, draw_characters, 0); }
  void add_draw_ui_arrows(uint8_t draw_ui_arrows) { fbb_.AddElement<uint8_t>(292, draw_ui_arrows, 0); }
  void add_draw_pies(uint8_t draw_pies) { fbb_.AddElement<uint8_t>(294, draw_pies, 0); }
  void add_draw_props(uint8_t draw_props) { fbb_.AddElement<uint8_t>(296, draw_props, 0); }
  void add_draw_axes(uint8_t draw_axes) { fbb_.AddElement<uint8_t>(298, draw_axes, 0); }
  void add_draw_character_lineup(uint8_t draw_character_lineup) { fbb_.AddElement<uint8_t>(300, draw_character_lineup, 0); }
  void add_draw_lineup_accessories(uint8_t draw_lineup_accessories) { fbb_.AddElement<uint8_t>(302, draw_lineup_accessories, 0); }
  void add_draw_fixed_renderable(fpl::pie_noon::RenderableId draw_fixed_renderable) { fbb_.AddElement<uint16_t>(304, static_cast<uint16_t>(draw_fixed_renderable), 0); }
  void add_button_to_camera_translation_scale(const fpl::pie_noon::Vec3 *button_to_camera_translation_scale) { fbb_.AddStruct(306, button_to_camera_translation_scale); }
  void add_mouse_to_camera_rotation_scale(float mouse_to_camera_rotation_scale) { fbb_.AddElement<float>(308, mouse_to_camera_rotation_scale, 0); }
  void add_allow_camera_movement(uint8_t allow_camera_movement) { fbb_.AddElement<uint8_t>(310, allow_camera_movement, 0); }
  void add_print_character_states(uint8_t print_character_states) { fbb_.AddElement<uint8_t>(312, print_character_states, 0); }
  void add_print_pie_states(uint8_t print_pie_states) { fbb_.AddElement<uint8_t>(314, print_pie_states, 0); }
  void add_print_camera_orientation(uint8_t print_camera_orientation) { fbb_.AddElement<uint8_t>(316, print_camera_orientation, 0); }
  void add_multiscreen_options(flatbuffers::Offset<MultiscreenOptions> multiscreen_options) { fbb_.AddOffset(318, multiscreen_options); }
  ConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  ConfigBuilder &operator=(const ConfigBuilder &);
  flatbuffers::Offset<Config> Finish() {
    auto o = flatbuffers::Offset<Config>(fbb_.EndTable(start_, 158));
    return o;
  }
};

inline flatbuffers::Offset<Config> CreateConfig(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<fpl::pie_noon::EntityDefinition>>> entity_list = 0,
   flatbuffers::Offset<fpl::pie_noon::EntityDefinition> character_scene_object = 0,
   float ground_plane_width = 0,
   float ground_plane_depth = 0,
   flatbuffers::Offset<fpl::pie_noon::EntityDefinition> splatter_def = 0,
   const fpl::pie_noon::Vec3 *splatter_range_min = 0,
   const fpl::pie_noon::Vec3 *splatter_range_max = 0,
   float splatter_scale_min = 0,
   float splatter_scale_max = 0,
   float splatter_radius_squared = 0,
   uint32_t character_count = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CharacterArrangement>>> character_arrangements = 0,
   uint32_t number_of_keyboard_controllers = 0,
   flatbuffers::Offset<flatbuffers::Vector<const fpl::pie_noon::Vec3 *>> character_colors = 0,
   const fpl::pie_noon::Vec3 *ai_color = 0,
   float character_global_brightness_factor = 0,
   float character_global_brightness_factor_buttons = 0,
   flatbuffers::Offset<fpl::pie_noon::ScoringRules> scoring_rules = 0,
   flatbuffers::Offset<pindrop::AudioConfig> audio = 0,
   const fpl::pie_noon::Vec3 *camera_position = 0,
   const fpl::pie_noon::Vec3 *camera_target = 0,
   flatbuffers::Offset<flatbuffers::Vector<const fpl::pie_noon::Vec3 *>> light_positions = 0,
   GameMode game_mode = GameMode_Survival,
   int32_t character_health = 0,
   int32_t game_time = 0,
   int32_t target_score = 0,
   int32_t pie_flight_time = 0,
   float pie_arc_height = 0,
   float pie_arc_height_variance = 0,
   float pie_initial_height = 0,
   int32_t pie_rotations = 0,
   int32_t pie_rotation_variance = 0,
   float pie_initial_angle = 0,
   float pie_target_angle = 0,
   PieDeflectionMode pie_deflection_mode = PieDeflectionMode_ToTargetOfTarget,
   int32_t pie_damage_change_when_deflected = 0,
   int32_t min_update_time = 0,
   int32_t max_update_time = 0,
   flatbuffers::Offset<motive::OvershootParameters> face_angle_def = 0,
   flatbuffers::Offset<motive::Settled1fParameters> face_angle_twitch = 0,
   float face_angle_twitch_velocity = 0,
   float tilt_away_angle = 0,
   flatbuffers::Offset<motive::OvershootParameters> join_motivator_def = 0,
   float join_motivator_start_value = 0,
   float join_motivator_target_value = 0,
   float join_motivator_start_velocity = 0,
   uint16_t join_number_of_pies = 0,
   flatbuffers::Offset<flatbuffers::Vector<uint16_t>> renderable_id_for_pie_damage = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> hit_sound_id_for_pie_damage = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> blocked_sound_id_for_pie_damage = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<motive::OvershootParameters>>> motivator_specifications = 0,
   float prop_shake_velocity = 0,
   float prop_shake_percent_per_damage = 0,
   float prop_shake_identity_distance_sq = 0,
   int32_t camera_move_on_damage_min_damage = 0,
   flatbuffers::Offset<CameraMovementToSubject> camera_move_on_damage = 0,
   flatbuffers::Offset<CameraMovementToSubject> camera_move_to_base = 0,
   int32_t play_finished_timeout = 0,
   const fpl::pie_noon::Vec2i *window_size = 0,
   flatbuffers::Offset<flatbuffers::String> window_title = 0,
   float viewport_angle = 0,
   float viewport_near_plane = 0,
   float viewport_far_plane = 0,
   float pixel_to_world_scale = 0,
   float cardboard_front_z_offset = 0,
   float cardboard_back_z_offset = 0,
   float accessory_z_offset = 0,
   float accessory_z_increment = 0,
   float cardboard_bias_towards_stage_front = 0,
   const fpl::pie_noon::Vec3 *cardboard_ambient_material = 0,
   const fpl::pie_noon::Vec3 *cardboard_diffuse_material = 0,
   const fpl::pie_noon::Vec3 *cardboard_specular_material = 0,
   float cardboard_shininess = 0,
   float cardboard_normalmap_scale = 0,
   float stick_y_offset = 0,
   float stick_front_z_offset = 0,
   float stick_back_z_offset = 0,
   flatbuffers::Offset<flatbuffers::String> stick_front = 0,
   flatbuffers::Offset<flatbuffers::String> stick_back = 0,
   const fpl::pie_noon::Vec2 *stick_bounds = 0,
   flatbuffers::Offset<flatbuffers::String> loading_material = 0,
   flatbuffers::Offset<flatbuffers::String> loading_logo = 0,
   int32_t min_loading_time = 0,
   flatbuffers::Offset<flatbuffers::String> fade_material = 0,
   int32_t full_screen_fade_time = 0,
   const fpl::pie_noon::Vec3 *ui_arrow_offset = 0,
   const fpl::pie_noon::Vec3 *ui_arrow_scale = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AccessoryGroup>>> splatter_map = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FixedAccessory>>> splatter_accessories = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<AccessoryGroup>>> health_map = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<FixedAccessory>>> health_accessories = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<CardboardFigure>>> renderables = 0,
   flatbuffers::Offset<fpl::ParticleDef> pie_splatter_def = 0,
   int32_t pie_noon_particles_per_damage = 0,
   flatbuffers::Offset<fpl::ParticleDef> confetti_def = 0,
   int32_t joining_confetti_count = 0,
   flatbuffers::Offset<fpl::ParticleDef> joining_confetti_def = 0,
   flatbuffers::Offset<flatbuffers::String> cardboard_center_material = 0,
   const fpl::pie_noon::Vec2 *cardboard_center_scale = 0,
   const fpl::pie_noon::Vec4 *cardboard_center_color = 0,
   float target_reticle_distance = 0,
   float target_reticle_height = 0,
   const fpl::pie_noon::Vec3 *cardboard_pie_offset = 0,
   const fpl::pie_noon::Vec3 *cardboard_pie_scale = 0,
   const fpl::pie_noon::Vec3 *cardboard_health_offset = 0,
   float cardboard_arrow_scale = 0,
   int32_t ai_minimum_time_between_actions = 0,
   int32_t ai_maximum_time_between_actions = 0,
   float ai_chance_to_block = 0,
   float ai_chance_to_change_aim = 0,
   float ai_chance_to_throw = 0,
   int32_t ai_block_min_duration = 0,
   int32_t ai_block_max_duration = 0,
   flatbuffers::Offset<UiGroup> touchscreen_zones = 0,
   flatbuffers::Offset<UiGroup> pause_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> title_screen_buttons_android = 0,
   flatbuffers::Offset<UiGroup> title_screen_buttons_non_android = 0,
   flatbuffers::Offset<UiGroup> extras_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> join_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_pleasewait_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_waitingforplayers_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_waitingforplayers1_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_waitingforplayers2_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_waitingforplayers3_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_waitingforplayers4_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_searching_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_connecting_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_waitingforgame_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_cant_host_game_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_all_players_disconnected_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_host_disconnected_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> msx_connection_lost_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> multiplayer_host = 0,
   flatbuffers::Offset<UiGroup> multiplayer_client = 0,
   flatbuffers::Offset<UiGroup> cardboard_screen_buttons = 0,
   flatbuffers::Offset<UiGroup> game_modes_screen_buttons = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tutorial_slides = 0,
   float tutorial_aspect_ratio = 0,
   int32_t tutorial_num_future_slides_to_load = 0,
   int32_t tutorial_fade_time = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> multiscreen_tutorial_slides = 0,
   float multiscreen_tutorial_aspect_ratio = 0,
   uint8_t draw_characters = 0,
   uint8_t draw_ui_arrows = 0,
   uint8_t draw_pies = 0,
   uint8_t draw_props = 0,
   uint8_t draw_axes = 0,
   uint8_t draw_character_lineup = 0,
   uint8_t draw_lineup_accessories = 0,
   fpl::pie_noon::RenderableId draw_fixed_renderable = fpl::pie_noon::RenderableId_Invalid,
   const fpl::pie_noon::Vec3 *button_to_camera_translation_scale = 0,
   float mouse_to_camera_rotation_scale = 0,
   uint8_t allow_camera_movement = 0,
   uint8_t print_character_states = 0,
   uint8_t print_pie_states = 0,
   uint8_t print_camera_orientation = 0,
   flatbuffers::Offset<MultiscreenOptions> multiscreen_options = 0) {
  ConfigBuilder builder_(_fbb);
  builder_.add_multiscreen_options(multiscreen_options);
  builder_.add_mouse_to_camera_rotation_scale(mouse_to_camera_rotation_scale);
  builder_.add_button_to_camera_translation_scale(button_to_camera_translation_scale);
  builder_.add_multiscreen_tutorial_aspect_ratio(multiscreen_tutorial_aspect_ratio);
  builder_.add_multiscreen_tutorial_slides(multiscreen_tutorial_slides);
  builder_.add_tutorial_fade_time(tutorial_fade_time);
  builder_.add_tutorial_num_future_slides_to_load(tutorial_num_future_slides_to_load);
  builder_.add_tutorial_aspect_ratio(tutorial_aspect_ratio);
  builder_.add_tutorial_slides(tutorial_slides);
  builder_.add_game_modes_screen_buttons(game_modes_screen_buttons);
  builder_.add_cardboard_screen_buttons(cardboard_screen_buttons);
  builder_.add_multiplayer_client(multiplayer_client);
  builder_.add_multiplayer_host(multiplayer_host);
  builder_.add_msx_connection_lost_screen_buttons(msx_connection_lost_screen_buttons);
  builder_.add_msx_host_disconnected_screen_buttons(msx_host_disconnected_screen_buttons);
  builder_.add_msx_all_players_disconnected_screen_buttons(msx_all_players_disconnected_screen_buttons);
  builder_.add_msx_cant_host_game_screen_buttons(msx_cant_host_game_screen_buttons);
  builder_.add_msx_waitingforgame_screen_buttons(msx_waitingforgame_screen_buttons);
  builder_.add_msx_connecting_screen_buttons(msx_connecting_screen_buttons);
  builder_.add_msx_searching_screen_buttons(msx_searching_screen_buttons);
  builder_.add_msx_waitingforplayers4_screen_buttons(msx_waitingforplayers4_screen_buttons);
  builder_.add_msx_waitingforplayers3_screen_buttons(msx_waitingforplayers3_screen_buttons);
  builder_.add_msx_waitingforplayers2_screen_buttons(msx_waitingforplayers2_screen_buttons);
  builder_.add_msx_waitingforplayers1_screen_buttons(msx_waitingforplayers1_screen_buttons);
  builder_.add_msx_waitingforplayers_screen_buttons(msx_waitingforplayers_screen_buttons);
  builder_.add_msx_pleasewait_screen_buttons(msx_pleasewait_screen_buttons);
  builder_.add_msx_screen_buttons(msx_screen_buttons);
  builder_.add_join_screen_buttons(join_screen_buttons);
  builder_.add_extras_screen_buttons(extras_screen_buttons);
  builder_.add_title_screen_buttons_non_android(title_screen_buttons_non_android);
  builder_.add_title_screen_buttons_android(title_screen_buttons_android);
  builder_.add_pause_screen_buttons(pause_screen_buttons);
  builder_.add_touchscreen_zones(touchscreen_zones);
  builder_.add_ai_block_max_duration(ai_block_max_duration);
  builder_.add_ai_block_min_duration(ai_block_min_duration);
  builder_.add_ai_chance_to_throw(ai_chance_to_throw);
  builder_.add_ai_chance_to_change_aim(ai_chance_to_change_aim);
  builder_.add_ai_chance_to_block(ai_chance_to_block);
  builder_.add_ai_maximum_time_between_actions(ai_maximum_time_between_actions);
  builder_.add_ai_minimum_time_between_actions(ai_minimum_time_between_actions);
  builder_.add_cardboard_arrow_scale(cardboard_arrow_scale);
  builder_.add_cardboard_health_offset(cardboard_health_offset);
  builder_.add_cardboard_pie_scale(cardboard_pie_scale);
  builder_.add_cardboard_pie_offset(cardboard_pie_offset);
  builder_.add_target_reticle_height(target_reticle_height);
  builder_.add_target_reticle_distance(target_reticle_distance);
  builder_.add_cardboard_center_color(cardboard_center_color);
  builder_.add_cardboard_center_scale(cardboard_center_scale);
  builder_.add_cardboard_center_material(cardboard_center_material);
  builder_.add_joining_confetti_def(joining_confetti_def);
  builder_.add_joining_confetti_count(joining_confetti_count);
  builder_.add_confetti_def(confetti_def);
  builder_.add_pie_noon_particles_per_damage(pie_noon_particles_per_damage);
  builder_.add_pie_splatter_def(pie_splatter_def);
  builder_.add_renderables(renderables);
  builder_.add_health_accessories(health_accessories);
  builder_.add_health_map(health_map);
  builder_.add_splatter_accessories(splatter_accessories);
  builder_.add_splatter_map(splatter_map);
  builder_.add_ui_arrow_scale(ui_arrow_scale);
  builder_.add_ui_arrow_offset(ui_arrow_offset);
  builder_.add_full_screen_fade_time(full_screen_fade_time);
  builder_.add_fade_material(fade_material);
  builder_.add_min_loading_time(min_loading_time);
  builder_.add_loading_logo(loading_logo);
  builder_.add_loading_material(loading_material);
  builder_.add_stick_bounds(stick_bounds);
  builder_.add_stick_back(stick_back);
  builder_.add_stick_front(stick_front);
  builder_.add_stick_back_z_offset(stick_back_z_offset);
  builder_.add_stick_front_z_offset(stick_front_z_offset);
  builder_.add_stick_y_offset(stick_y_offset);
  builder_.add_cardboard_normalmap_scale(cardboard_normalmap_scale);
  builder_.add_cardboard_shininess(cardboard_shininess);
  builder_.add_cardboard_specular_material(cardboard_specular_material);
  builder_.add_cardboard_diffuse_material(cardboard_diffuse_material);
  builder_.add_cardboard_ambient_material(cardboard_ambient_material);
  builder_.add_cardboard_bias_towards_stage_front(cardboard_bias_towards_stage_front);
  builder_.add_accessory_z_increment(accessory_z_increment);
  builder_.add_accessory_z_offset(accessory_z_offset);
  builder_.add_cardboard_back_z_offset(cardboard_back_z_offset);
  builder_.add_cardboard_front_z_offset(cardboard_front_z_offset);
  builder_.add_pixel_to_world_scale(pixel_to_world_scale);
  builder_.add_viewport_far_plane(viewport_far_plane);
  builder_.add_viewport_near_plane(viewport_near_plane);
  builder_.add_viewport_angle(viewport_angle);
  builder_.add_window_title(window_title);
  builder_.add_window_size(window_size);
  builder_.add_play_finished_timeout(play_finished_timeout);
  builder_.add_camera_move_to_base(camera_move_to_base);
  builder_.add_camera_move_on_damage(camera_move_on_damage);
  builder_.add_camera_move_on_damage_min_damage(camera_move_on_damage_min_damage);
  builder_.add_prop_shake_identity_distance_sq(prop_shake_identity_distance_sq);
  builder_.add_prop_shake_percent_per_damage(prop_shake_percent_per_damage);
  builder_.add_prop_shake_velocity(prop_shake_velocity);
  builder_.add_motivator_specifications(motivator_specifications);
  builder_.add_blocked_sound_id_for_pie_damage(blocked_sound_id_for_pie_damage);
  builder_.add_hit_sound_id_for_pie_damage(hit_sound_id_for_pie_damage);
  builder_.add_renderable_id_for_pie_damage(renderable_id_for_pie_damage);
  builder_.add_join_motivator_start_velocity(join_motivator_start_velocity);
  builder_.add_join_motivator_target_value(join_motivator_target_value);
  builder_.add_join_motivator_start_value(join_motivator_start_value);
  builder_.add_join_motivator_def(join_motivator_def);
  builder_.add_tilt_away_angle(tilt_away_angle);
  builder_.add_face_angle_twitch_velocity(face_angle_twitch_velocity);
  builder_.add_face_angle_twitch(face_angle_twitch);
  builder_.add_face_angle_def(face_angle_def);
  builder_.add_max_update_time(max_update_time);
  builder_.add_min_update_time(min_update_time);
  builder_.add_pie_damage_change_when_deflected(pie_damage_change_when_deflected);
  builder_.add_pie_target_angle(pie_target_angle);
  builder_.add_pie_initial_angle(pie_initial_angle);
  builder_.add_pie_rotation_variance(pie_rotation_variance);
  builder_.add_pie_rotations(pie_rotations);
  builder_.add_pie_initial_height(pie_initial_height);
  builder_.add_pie_arc_height_variance(pie_arc_height_variance);
  builder_.add_pie_arc_height(pie_arc_height);
  builder_.add_pie_flight_time(pie_flight_time);
  builder_.add_target_score(target_score);
  builder_.add_game_time(game_time);
  builder_.add_character_health(character_health);
  builder_.add_light_positions(light_positions);
  builder_.add_camera_target(camera_target);
  builder_.add_camera_position(camera_position);
  builder_.add_audio(audio);
  builder_.add_scoring_rules(scoring_rules);
  builder_.add_character_global_brightness_factor_buttons(character_global_brightness_factor_buttons);
  builder_.add_character_global_brightness_factor(character_global_brightness_factor);
  builder_.add_ai_color(ai_color);
  builder_.add_character_colors(character_colors);
  builder_.add_number_of_keyboard_controllers(number_of_keyboard_controllers);
  builder_.add_character_arrangements(character_arrangements);
  builder_.add_character_count(character_count);
  builder_.add_splatter_radius_squared(splatter_radius_squared);
  builder_.add_splatter_scale_max(splatter_scale_max);
  builder_.add_splatter_scale_min(splatter_scale_min);
  builder_.add_splatter_range_max(splatter_range_max);
  builder_.add_splatter_range_min(splatter_range_min);
  builder_.add_splatter_def(splatter_def);
  builder_.add_ground_plane_depth(ground_plane_depth);
  builder_.add_ground_plane_width(ground_plane_width);
  builder_.add_character_scene_object(character_scene_object);
  builder_.add_entity_list(entity_list);
  builder_.add_draw_fixed_renderable(draw_fixed_renderable);
  builder_.add_join_number_of_pies(join_number_of_pies);
  builder_.add_pie_deflection_mode(pie_deflection_mode);
  builder_.add_game_mode(game_mode);
  builder_.add_print_camera_orientation(print_camera_orientation);
  builder_.add_print_pie_states(print_pie_states);
  builder_.add_print_character_states(print_character_states);
  builder_.add_allow_camera_movement(allow_camera_movement);
  builder_.add_draw_lineup_accessories(draw_lineup_accessories);
  builder_.add_draw_character_lineup(draw_character_lineup);
  builder_.add_draw_axes(draw_axes);
  builder_.add_draw_props(draw_props);
  builder_.add_draw_pies(draw_pies);
  builder_.add_draw_ui_arrows(draw_ui_arrows);
  builder_.add_draw_characters(draw_characters);
  return builder_.Finish();
}

inline bool VerifyImguiWidgetUnion(flatbuffers::Verifier &verifier, const void *union_obj, ImguiWidgetUnion type) {
  switch (type) {
    case ImguiWidgetUnion_NONE: return true;
    case ImguiWidgetUnion_StartGroupDef: return verifier.VerifyTable(reinterpret_cast<const StartGroupDef *>(union_obj));
    case ImguiWidgetUnion_ImguiButtonDef: return verifier.VerifyTable(reinterpret_cast<const ImguiButtonDef *>(union_obj));
    case ImguiWidgetUnion_EndGroupDef: return verifier.VerifyTable(reinterpret_cast<const EndGroupDef *>(union_obj));
    default: return false;
  }
}

inline const fpl::pie_noon::Config *GetConfig(const void *buf) { return flatbuffers::GetRoot<fpl::pie_noon::Config>(buf); }

inline bool VerifyConfigBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<fpl::pie_noon::Config>(); }

inline void FinishConfigBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<fpl::pie_noon::Config> root) { fbb.Finish(root); }

}  // namespace pie_noon
}  // namespace fpl

#endif  // FLATBUFFERS_GENERATED_CONFIG_FPL_PIE_NOON_H_
