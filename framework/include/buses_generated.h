// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_BUSES_PINDROP_H_
#define FLATBUFFERS_GENERATED_BUSES_PINDROP_H_

#include "flatbuffers/flatbuffers.h"


namespace pindrop {

struct BusDef;
struct BusDefList;

struct BusDef FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *name() const { return GetPointer<const flatbuffers::String *>(4); }
  float gain() const { return GetField<float>(6, 1.0); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *child_buses() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(8); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *duck_buses() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(10); }
  float duck_gain() const { return GetField<float>(12, 0); }
  float duck_fade_in_time() const { return GetField<float>(14, 0); }
  float duck_fade_out_time() const { return GetField<float>(16, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* name */) &&
           verifier.Verify(name()) &&
           VerifyField<float>(verifier, 6 /* gain */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* child_buses */) &&
           verifier.Verify(child_buses()) &&
           verifier.VerifyVectorOfStrings(child_buses()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* duck_buses */) &&
           verifier.Verify(duck_buses()) &&
           verifier.VerifyVectorOfStrings(duck_buses()) &&
           VerifyField<float>(verifier, 12 /* duck_gain */) &&
           VerifyField<float>(verifier, 14 /* duck_fade_in_time */) &&
           VerifyField<float>(verifier, 16 /* duck_fade_out_time */) &&
           verifier.EndTable();
  }
};

struct BusDefBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) { fbb_.AddOffset(4, name); }
  void add_gain(float gain) { fbb_.AddElement<float>(6, gain, 1.0); }
  void add_child_buses(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> child_buses) { fbb_.AddOffset(8, child_buses); }
  void add_duck_buses(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> duck_buses) { fbb_.AddOffset(10, duck_buses); }
  void add_duck_gain(float duck_gain) { fbb_.AddElement<float>(12, duck_gain, 0); }
  void add_duck_fade_in_time(float duck_fade_in_time) { fbb_.AddElement<float>(14, duck_fade_in_time, 0); }
  void add_duck_fade_out_time(float duck_fade_out_time) { fbb_.AddElement<float>(16, duck_fade_out_time, 0); }
  BusDefBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BusDefBuilder &operator=(const BusDefBuilder &);
  flatbuffers::Offset<BusDef> Finish() {
    auto o = flatbuffers::Offset<BusDef>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<BusDef> CreateBusDef(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> name = 0,
   float gain = 1.0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> child_buses = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> duck_buses = 0,
   float duck_gain = 0,
   float duck_fade_in_time = 0,
   float duck_fade_out_time = 0) {
  BusDefBuilder builder_(_fbb);
  builder_.add_duck_fade_out_time(duck_fade_out_time);
  builder_.add_duck_fade_in_time(duck_fade_in_time);
  builder_.add_duck_gain(duck_gain);
  builder_.add_duck_buses(duck_buses);
  builder_.add_child_buses(child_buses);
  builder_.add_gain(gain);
  builder_.add_name(name);
  return builder_.Finish();
}

struct BusDefList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::Vector<flatbuffers::Offset<BusDef>> *buses() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<BusDef>> *>(4); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* buses */) &&
           verifier.Verify(buses()) &&
           verifier.VerifyVectorOfTables(buses()) &&
           verifier.EndTable();
  }
};

struct BusDefListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buses(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BusDef>>> buses) { fbb_.AddOffset(4, buses); }
  BusDefListBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  BusDefListBuilder &operator=(const BusDefListBuilder &);
  flatbuffers::Offset<BusDefList> Finish() {
    auto o = flatbuffers::Offset<BusDefList>(fbb_.EndTable(start_, 1));
    return o;
  }
};

inline flatbuffers::Offset<BusDefList> CreateBusDefList(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<BusDef>>> buses = 0) {
  BusDefListBuilder builder_(_fbb);
  builder_.add_buses(buses);
  return builder_.Finish();
}

inline const BusDefList *GetBusDefList(const void *buf) { return flatbuffers::GetRoot<BusDefList>(buf); }

inline bool VerifyBusDefListBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<BusDefList>(); }

inline void FinishBusDefListBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<BusDefList> root) { fbb.Finish(root); }

}  // namespace pindrop

#endif  // FLATBUFFERS_GENERATED_BUSES_PINDROP_H_
