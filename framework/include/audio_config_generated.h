// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_AUDIOCONFIG_PINDROP_H_
#define FLATBUFFERS_GENERATED_AUDIOCONFIG_PINDROP_H_

#include "flatbuffers/flatbuffers.h"


namespace pindrop {

struct AudioConfig;

enum OutputChannels {
  OutputChannels_None = 0,
  OutputChannels_Mono = 1,
  OutputChannels_Stereo = 2
};

inline const char **EnumNamesOutputChannels() {
  static const char *names[] = { "None", "Mono", "Stereo", nullptr };
  return names;
}

inline const char *EnumNameOutputChannels(OutputChannels e) { return EnumNamesOutputChannels()[e]; }

struct AudioConfig FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  uint32_t output_frequency() const { return GetField<uint32_t>(4, 0); }
  OutputChannels output_channels() const { return static_cast<OutputChannels>(GetField<uint16_t>(6, 0)); }
  uint32_t output_buffer_size() const { return GetField<uint32_t>(8, 0); }
  uint32_t mixer_channels() const { return GetField<uint32_t>(10, 0); }
  uint32_t mixer_virtual_channels() const { return GetField<uint32_t>(12, 0); }
  uint32_t listeners() const { return GetField<uint32_t>(14, 0); }
  const flatbuffers::String *bus_file() const { return GetPointer<const flatbuffers::String *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, 4 /* output_frequency */) &&
           VerifyField<uint16_t>(verifier, 6 /* output_channels */) &&
           VerifyField<uint32_t>(verifier, 8 /* output_buffer_size */) &&
           VerifyField<uint32_t>(verifier, 10 /* mixer_channels */) &&
           VerifyField<uint32_t>(verifier, 12 /* mixer_virtual_channels */) &&
           VerifyField<uint32_t>(verifier, 14 /* listeners */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* bus_file */) &&
           verifier.Verify(bus_file()) &&
           verifier.EndTable();
  }
};

struct AudioConfigBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_output_frequency(uint32_t output_frequency) { fbb_.AddElement<uint32_t>(4, output_frequency, 0); }
  void add_output_channels(OutputChannels output_channels) { fbb_.AddElement<uint16_t>(6, static_cast<uint16_t>(output_channels), 0); }
  void add_output_buffer_size(uint32_t output_buffer_size) { fbb_.AddElement<uint32_t>(8, output_buffer_size, 0); }
  void add_mixer_channels(uint32_t mixer_channels) { fbb_.AddElement<uint32_t>(10, mixer_channels, 0); }
  void add_mixer_virtual_channels(uint32_t mixer_virtual_channels) { fbb_.AddElement<uint32_t>(12, mixer_virtual_channels, 0); }
  void add_listeners(uint32_t listeners) { fbb_.AddElement<uint32_t>(14, listeners, 0); }
  void add_bus_file(flatbuffers::Offset<flatbuffers::String> bus_file) { fbb_.AddOffset(16, bus_file); }
  AudioConfigBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  AudioConfigBuilder &operator=(const AudioConfigBuilder &);
  flatbuffers::Offset<AudioConfig> Finish() {
    auto o = flatbuffers::Offset<AudioConfig>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<AudioConfig> CreateAudioConfig(flatbuffers::FlatBufferBuilder &_fbb,
   uint32_t output_frequency = 0,
   OutputChannels output_channels = OutputChannels_None,
   uint32_t output_buffer_size = 0,
   uint32_t mixer_channels = 0,
   uint32_t mixer_virtual_channels = 0,
   uint32_t listeners = 0,
   flatbuffers::Offset<flatbuffers::String> bus_file = 0) {
  AudioConfigBuilder builder_(_fbb);
  builder_.add_bus_file(bus_file);
  builder_.add_listeners(listeners);
  builder_.add_mixer_virtual_channels(mixer_virtual_channels);
  builder_.add_mixer_channels(mixer_channels);
  builder_.add_output_buffer_size(output_buffer_size);
  builder_.add_output_frequency(output_frequency);
  builder_.add_output_channels(output_channels);
  return builder_.Finish();
}

inline const AudioConfig *GetAudioConfig(const void *buf) { return flatbuffers::GetRoot<AudioConfig>(buf); }

inline bool VerifyAudioConfigBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<AudioConfig>(); }

inline void FinishAudioConfigBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<AudioConfig> root) { fbb.Finish(root); }

}  // namespace pindrop

#endif  // FLATBUFFERS_GENERATED_AUDIOCONFIG_PINDROP_H_
