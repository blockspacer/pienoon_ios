// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// This file defines the schema for a finite state machine that represents the
// state of a game character.
//
//     http://en.wikipedia.org/wiki/Finite-state_machine
//
// A character can be in one of many states, and as the game progresses the
// character will transition between them based on what the player does and what
// happens to them. For example, when a player presses the button assigned to
// `ThrowPie`, the ThrowPie bit will be set, and the character might transition
// into its `Throwing` state.

include "timeline.fbs";

namespace fpl.pie_noon;

// The list of state ids in the state machine. Each state must have a unique ID.
enum StateId:byte {
  Idling,
  Jumping,
  Joining,
  Loading_1,
  Loading_2,
  Loading_3,
  Throwing,
  Blocking,
  HitByPie,
  KO,
  Won,
  Count // Must be last
}

// A set of bit flags of logical inputs (as opposed to physical inputs) which
// represent various bits of information that the character uses to decide when
// to transition to another state. This combines both controller input and
// gameplay state that exists outside of the state machine, like whether a
// character was hit this frame or if they are out of health.
enum LogicalInputs:ushort (bit_flags) {
  ThrowPie,
  Deflect,
  Up,
  Down,
  Left,
  Right,
  Select,
  Cancel,
  JustHit,
  NoHealth,
  AnimationEnd,
  Won,
  Lost,
  JoinedGame,
  TriggerPieGrowth
}

enum GameModeCondition:ushort {
  AnyMode,
  SinglePlayerOnly,
  MultiPlayerOnly
}

// This represents the set of conditions that must be met to do something, like
// transition to a new state or execute an action.
table Condition {
  // The set of logical inputs that must be set.
  is_down:LogicalInputs;

  // The set of logical inputs that must not be set.
  is_up:LogicalInputs;

  // The set of logical inputs that must have been set this frame.
  went_down:LogicalInputs;

  // The set of logical inputs that must have been cleared this frame.
  went_up:LogicalInputs;

  // The current time must be between `time` and `end_time`.
  time:int = 0;
  end_time:int = 2147483647; // MAX_INT

  // What game mode to allow this condition to trigger in.
  // Default = Any Mode.
  game_mode:GameModeCondition;
}

// An event that is only executed when its condition is met.
table ConditionalEvent {
  condition:Condition;
  event:ushort;       // Identify what is happening in the event.
                      // For PieNoon, use EventId in pie_noon_common.fbs.
  modifier:ushort;    // Meaning depends on 'event'. e.g. amount of damage.
}

// When the given `condition` is met, the state machine will transition into the
// `target_state`.
table Transition {
  target_state:StateId;
  condition:Condition;
}

// A state the character can occupy. The state contains information on how the
// character should be animated as well as whether they can take damage or
// deflect pies in a given state. Events like deflecting are controlled by the
// list of `conditional_events`.
//
// A state may have a set of transitions to other states. Each frame, the
// condition on each transition will be evaluated in the order the transitions
// are declared. The first transition to have its condition met will be the one
// that is followed.
table CharacterState {
  id:StateId;
  transitions:[Transition];
  timeline:fpl.Timeline;
  conditional_events:[ConditionalEvent];
}

// The list of states that make up the state machine, as well as which state
// to initialize a character to.
table CharacterStateMachineDef {
  states:[CharacterState];
  initial_state:StateId;
}

root_type CharacterStateMachineDef;
